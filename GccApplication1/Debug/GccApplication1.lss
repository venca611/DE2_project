
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  000006fa  0000078e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  0080016a  0080016a  000007f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000828  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000185b  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b92  00000000  00000000  00002243  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d4d  00000000  00000000  00002dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000041c  00000000  00000000  00003b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a2  00000000  00000000  00003f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f42  00000000  00000000  000045e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00005524  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 43 02 	jmp	0x486	; 0x486 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 82 02 	jmp	0x504	; 0x504 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__vector_18>
  4c:	0c 94 14 03 	jmp	0x628	; 0x628 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 36       	cpi	r26, 0x6A	; 106
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e6       	ldi	r26, 0x6A	; 106
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 3b       	cpi	r26, 0xB5	; 181
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 01 02 	call	0x402	; 0x402 <main>
  9e:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_read>:
/* GPIO_read */
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	// kdyz je dany bit na dane adrese 0
	// tak se vrati 0 jinak 1
	if(bit_is_clear(*reg_name, pin_num))
  a6:	fc 01       	movw	r30, r24
  a8:	80 81       	ld	r24, Z
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <GPIO_read+0xc>
  ae:	95 95       	asr	r25
  b0:	87 95       	ror	r24
  b2:	6a 95       	dec	r22
  b4:	e2 f7       	brpl	.-8      	; 0xae <GPIO_read+0x8>
		return 0;
	else
		return 1;
  b6:	81 70       	andi	r24, 0x01	; 1
  b8:	08 95       	ret

000000ba <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  ba:	29 9a       	sbi	0x05, 1	; 5
  bc:	85 e0       	ldi	r24, 0x05	; 5
  be:	8a 95       	dec	r24
  c0:	f1 f7       	brne	.-4      	; 0xbe <toggle_e+0x4>
  c2:	00 00       	nop
  c4:	29 98       	cbi	0x05, 1	; 5
  c6:	08 95       	ret

000000c8 <lcd_write>:
  c8:	cf 93       	push	r28
  ca:	c8 2f       	mov	r28, r24
  cc:	66 23       	and	r22, r22
  ce:	11 f0       	breq	.+4      	; 0xd4 <lcd_write+0xc>
  d0:	28 9a       	sbi	0x05, 0	; 5
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <lcd_write+0xe>
  d4:	28 98       	cbi	0x05, 0	; 5
  d6:	54 9a       	sbi	0x0a, 4	; 10
  d8:	55 9a       	sbi	0x0a, 5	; 10
  da:	56 9a       	sbi	0x0a, 6	; 10
  dc:	57 9a       	sbi	0x0a, 7	; 10
  de:	5f 98       	cbi	0x0b, 7	; 11
  e0:	5e 98       	cbi	0x0b, 6	; 11
  e2:	5d 98       	cbi	0x0b, 5	; 11
  e4:	5c 98       	cbi	0x0b, 4	; 11
  e6:	cc 23       	and	r28, r28
  e8:	0c f4       	brge	.+2      	; 0xec <lcd_write+0x24>
  ea:	5f 9a       	sbi	0x0b, 7	; 11
  ec:	c6 fd       	sbrc	r28, 6
  ee:	5e 9a       	sbi	0x0b, 6	; 11
  f0:	c5 fd       	sbrc	r28, 5
  f2:	5d 9a       	sbi	0x0b, 5	; 11
  f4:	c4 fd       	sbrc	r28, 4
  f6:	5c 9a       	sbi	0x0b, 4	; 11
  f8:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
  fc:	5f 98       	cbi	0x0b, 7	; 11
  fe:	5e 98       	cbi	0x0b, 6	; 11
 100:	5d 98       	cbi	0x0b, 5	; 11
 102:	5c 98       	cbi	0x0b, 4	; 11
 104:	c3 fd       	sbrc	r28, 3
 106:	5f 9a       	sbi	0x0b, 7	; 11
 108:	c2 fd       	sbrc	r28, 2
 10a:	5e 9a       	sbi	0x0b, 6	; 11
 10c:	c1 fd       	sbrc	r28, 1
 10e:	5d 9a       	sbi	0x0b, 5	; 11
 110:	c0 fd       	sbrc	r28, 0
 112:	5c 9a       	sbi	0x0b, 4	; 11
 114:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
 118:	5c 9a       	sbi	0x0b, 4	; 11
 11a:	5d 9a       	sbi	0x0b, 5	; 11
 11c:	5e 9a       	sbi	0x0b, 6	; 11
 11e:	5f 9a       	sbi	0x0b, 7	; 11
 120:	87 eb       	ldi	r24, 0xB7	; 183
 122:	9b e0       	ldi	r25, 0x0B	; 11
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_write+0x5c>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_write+0x62>
 12a:	00 00       	nop
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <lcd_command>:
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_write>
 136:	08 95       	ret

00000138 <lcd_data>:
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_write>
 13e:	08 95       	ret

00000140 <lcd_gotoxy>:
 140:	61 11       	cpse	r22, r1
 142:	04 c0       	rjmp	.+8      	; 0x14c <lcd_gotoxy+0xc>
 144:	80 58       	subi	r24, 0x80	; 128
 146:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
 14a:	08 95       	ret
 14c:	80 54       	subi	r24, 0x40	; 64
 14e:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
 152:	08 95       	ret

00000154 <lcd_clrscr>:
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
 15a:	08 95       	ret

0000015c <lcd_putc>:
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_write>
 162:	08 95       	ret

00000164 <lcd_puts>:
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ec 01       	movw	r28, r24
 16a:	21 96       	adiw	r28, 0x01	; 1
 16c:	fc 01       	movw	r30, r24
 16e:	80 81       	ld	r24, Z
 170:	88 23       	and	r24, r24
 172:	29 f0       	breq	.+10     	; 0x17e <lcd_puts+0x1a>
 174:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_putc>
 178:	89 91       	ld	r24, Y+
 17a:	81 11       	cpse	r24, r1
 17c:	fb cf       	rjmp	.-10     	; 0x174 <lcd_puts+0x10>
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 184:	cf 93       	push	r28
 186:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 188:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 18a:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 18c:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 18e:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 190:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 192:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 194:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	99 ef       	ldi	r25, 0xF9	; 249
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x16>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x1c>
 1a0:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 1a2:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 1a4:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 1a6:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
 1aa:	8f e1       	ldi	r24, 0x1F	; 31
 1ac:	9e e4       	ldi	r25, 0x4E	; 78
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_init+0x2a>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcd_init+0x30>
 1b4:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1b6:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_init+0x3a>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <lcd_init+0x40>
 1c4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1c6:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_init+0x4a>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <lcd_init+0x50>
 1d4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1d6:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1d8:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_init+0x5c>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_init+0x62>
 1e6:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1e8:	88 e2       	ldi	r24, 0x28	; 40
 1ea:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1ee:	88 e0       	ldi	r24, 0x08	; 8
 1f0:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1f4:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1fe:	8c 2f       	mov	r24, r28
 200:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
}/* lcd_init */
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <reset>:
		return 1;
	}*/
	if(code[0]==1)
		return 1;
	else return 0;
}
 208:	0f 93       	push	r16
 20a:	1f 93       	push	r17
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	88 e0       	ldi	r24, 0x08	; 8
 212:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_init>
 216:	8c e0       	ldi	r24, 0x0C	; 12
 218:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_init>
 21c:	80 e4       	ldi	r24, 0x40	; 64
 21e:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
 222:	c4 e0       	ldi	r28, 0x04	; 4
 224:	d1 e0       	ldi	r29, 0x01	; 1
 226:	04 e1       	ldi	r16, 0x14	; 20
 228:	11 e0       	ldi	r17, 0x01	; 1
 22a:	89 91       	ld	r24, Y+
 22c:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>
 230:	c0 17       	cp	r28, r16
 232:	d1 07       	cpc	r29, r17
 234:	d1 f7       	brne	.-12     	; 0x22a <reset+0x22>
 236:	80 e8       	ldi	r24, 0x80	; 128
 238:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_putc>
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	8f e0       	ldi	r24, 0x0F	; 15
 246:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_gotoxy>
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_putc>
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_gotoxy>
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_putc>
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	8f e0       	ldi	r24, 0x0F	; 15
 262:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_gotoxy>
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_putc>
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_gotoxy>
 274:	84 e1       	ldi	r24, 0x14	; 20
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_puts>
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	0f 91       	pop	r16
 284:	08 95       	ret

00000286 <getkey>:
 286:	cf 92       	push	r12
 288:	df 92       	push	r13
 28a:	ef 92       	push	r14
 28c:	ff 92       	push	r15
 28e:	0f 93       	push	r16
 290:	1f 93       	push	r17
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	87 b1       	in	r24, 0x07	; 7
 298:	80 78       	andi	r24, 0x80	; 128
 29a:	87 b9       	out	0x07, r24	; 7
 29c:	88 b1       	in	r24, 0x08	; 8
 29e:	8f 60       	ori	r24, 0x0F	; 15
 2a0:	88 b9       	out	0x08, r24	; 8
 2a2:	00 e0       	ldi	r16, 0x00	; 0
 2a4:	10 e0       	ldi	r17, 0x00	; 0
 2a6:	68 94       	set
 2a8:	cc 24       	eor	r12, r12
 2aa:	c4 f8       	bld	r12, 4
 2ac:	d1 2c       	mov	r13, r1
 2ae:	d0 2f       	mov	r29, r16
 2b0:	97 b1       	in	r25, 0x07	; 7
 2b2:	76 01       	movw	r14, r12
 2b4:	00 2e       	mov	r0, r16
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <getkey+0x36>
 2b8:	ee 0c       	add	r14, r14
 2ba:	ff 1c       	adc	r15, r15
 2bc:	0a 94       	dec	r0
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <getkey+0x32>
 2c0:	9e 29       	or	r25, r14
 2c2:	97 b9       	out	0x07, r25	; 7
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	86 e2       	ldi	r24, 0x26	; 38
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_read>
 2ce:	88 23       	and	r24, r24
 2d0:	e9 f0       	breq	.+58     	; 0x30c <getkey+0x86>
 2d2:	c0 e0       	ldi	r28, 0x00	; 0
 2d4:	6c 2f       	mov	r22, r28
 2d6:	86 e2       	ldi	r24, 0x26	; 38
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_read>
 2de:	81 11       	cpse	r24, r1
 2e0:	07 c0       	rjmp	.+14     	; 0x2f0 <getkey+0x6a>
 2e2:	8c 2f       	mov	r24, r28
 2e4:	88 0f       	add	r24, r24
 2e6:	c8 0f       	add	r28, r24
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	8d 0f       	add	r24, r29
 2ec:	8c 0f       	add	r24, r28
 2ee:	0f c0       	rjmp	.+30     	; 0x30e <getkey+0x88>
 2f0:	cf 5f       	subi	r28, 0xFF	; 255
 2f2:	c4 30       	cpi	r28, 0x04	; 4
 2f4:	79 f7       	brne	.-34     	; 0x2d4 <getkey+0x4e>
 2f6:	87 b1       	in	r24, 0x07	; 7
 2f8:	e0 94       	com	r14
 2fa:	e8 22       	and	r14, r24
 2fc:	e7 b8       	out	0x07, r14	; 7
 2fe:	0f 5f       	subi	r16, 0xFF	; 255
 300:	1f 4f       	sbci	r17, 0xFF	; 255
 302:	03 30       	cpi	r16, 0x03	; 3
 304:	11 05       	cpc	r17, r1
 306:	99 f6       	brne	.-90     	; 0x2ae <getkey+0x28>
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	01 c0       	rjmp	.+2      	; 0x30e <getkey+0x88>
 30c:	8f ef       	ldi	r24, 0xFF	; 255
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	ff 90       	pop	r15
 318:	ef 90       	pop	r14
 31a:	df 90       	pop	r13
 31c:	cf 90       	pop	r12
 31e:	08 95       	ret

00000320 <get_code>:
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	ec 01       	movw	r28, r24
 326:	e1 eb       	ldi	r30, 0xB1	; 177
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	8e 7f       	andi	r24, 0xFE	; 254
 32e:	80 83       	st	Z, r24
 330:	80 81       	ld	r24, Z
 332:	86 60       	ori	r24, 0x06	; 6
 334:	80 83       	st	Z, r24
 336:	e0 e7       	ldi	r30, 0x70	; 112
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	81 60       	ori	r24, 0x01	; 1
 33e:	80 83       	st	Z, r24
 340:	0e 94 43 01 	call	0x286	; 0x286 <getkey>
 344:	88 23       	and	r24, r24
 346:	a9 f1       	breq	.+106    	; 0x3b2 <get_code+0x92>
 348:	8a 30       	cpi	r24, 0x0A	; 10
 34a:	19 f0       	breq	.+6      	; 0x352 <get_code+0x32>
 34c:	8c 30       	cpi	r24, 0x0C	; 12
 34e:	51 f0       	breq	.+20     	; 0x364 <get_code+0x44>
 350:	05 c0       	rjmp	.+10     	; 0x35c <get_code+0x3c>
 352:	8b 81       	ldd	r24, Y+3	; 0x03
 354:	8a 30       	cpi	r24, 0x0A	; 10
 356:	79 f4       	brne	.+30     	; 0x376 <get_code+0x56>
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	12 c0       	rjmp	.+36     	; 0x380 <get_code+0x60>
 35c:	98 81       	ld	r25, Y
 35e:	9a 30       	cpi	r25, 0x0A	; 10
 360:	b9 f4       	brne	.+46     	; 0x390 <get_code+0x70>
 362:	21 c0       	rjmp	.+66     	; 0x3a6 <get_code+0x86>
 364:	e0 e7       	ldi	r30, 0x70	; 112
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	8e 7f       	andi	r24, 0xFE	; 254
 36c:	80 83       	st	Z, r24
 36e:	82 e0       	ldi	r24, 0x02	; 2
 370:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <current_state>
 374:	1e c0       	rjmp	.+60     	; 0x3b2 <get_code+0x92>
 376:	fe 01       	movw	r30, r28
 378:	33 96       	adiw	r30, 0x03	; 3
 37a:	8a e0       	ldi	r24, 0x0A	; 10
 37c:	80 83       	st	Z, r24
 37e:	19 c0       	rjmp	.+50     	; 0x3b2 <get_code+0x92>
 380:	81 50       	subi	r24, 0x01	; 1
 382:	fe 01       	movw	r30, r28
 384:	e8 0f       	add	r30, r24
 386:	f1 1d       	adc	r31, r1
 388:	90 81       	ld	r25, Z
 38a:	9a 30       	cpi	r25, 0x0A	; 10
 38c:	c9 f3       	breq	.-14     	; 0x380 <get_code+0x60>
 38e:	f5 cf       	rjmp	.-22     	; 0x37a <get_code+0x5a>
 390:	9e 01       	movw	r18, r28
 392:	2f 5f       	subi	r18, 0xFF	; 255
 394:	3f 4f       	sbci	r19, 0xFF	; 255
 396:	24 96       	adiw	r28, 0x04	; 4
 398:	f9 01       	movw	r30, r18
 39a:	2f 5f       	subi	r18, 0xFF	; 255
 39c:	3f 4f       	sbci	r19, 0xFF	; 255
 39e:	90 81       	ld	r25, Z
 3a0:	9a 30       	cpi	r25, 0x0A	; 10
 3a2:	21 f4       	brne	.+8      	; 0x3ac <get_code+0x8c>
 3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <get_code+0x88>
 3a6:	fe 01       	movw	r30, r28
 3a8:	80 83       	st	Z, r24
 3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <get_code+0x92>
 3ac:	2c 17       	cp	r18, r28
 3ae:	3d 07       	cpc	r19, r29
 3b0:	99 f7       	brne	.-26     	; 0x398 <get_code+0x78>
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <state_machine>:

//funkce a procedury
void state_machine(void)
{
	static uint8_t code[4]={10,10,10,10};
	switch (current_state)
 3b8:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <current_state>
 3bc:	82 30       	cpi	r24, 0x02	; 2
 3be:	a1 f0       	breq	.+40     	; 0x3e8 <state_machine+0x30>
 3c0:	28 f4       	brcc	.+10     	; 0x3cc <state_machine+0x14>
 3c2:	88 23       	and	r24, r24
 3c4:	31 f0       	breq	.+12     	; 0x3d2 <state_machine+0x1a>
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	51 f0       	breq	.+20     	; 0x3de <state_machine+0x26>
 3ca:	18 c0       	rjmp	.+48     	; 0x3fc <state_machine+0x44>
 3cc:	85 30       	cpi	r24, 0x05	; 5
 3ce:	c0 f0       	brcs	.+48     	; 0x400 <__LOCK_REGION_LENGTH__>
 3d0:	15 c0       	rjmp	.+42     	; 0x3fc <state_machine+0x44>
	{
		case RESET:
			reset();
 3d2:	0e 94 04 01 	call	0x208	; 0x208 <reset>
			current_state = GET_CODE;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <current_state>
			break;
 3dc:	08 95       	ret
		case GET_CODE:
			get_code(code);
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	0e 94 90 01 	call	0x320	; 0x320 <get_code>
			break;
 3e6:	08 95       	ret
		case CHECK_CODE:
			current_state = check_code(code)?DOOR_OPEN:WRONG_CODE;
 3e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	11 f0       	breq	.+4      	; 0x3f4 <state_machine+0x3c>
 3f0:	84 e0       	ldi	r24, 0x04	; 4
 3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <state_machine+0x3e>
 3f4:	83 e0       	ldi	r24, 0x03	; 3
 3f6:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <current_state>
			break;
 3fa:	08 95       	ret
		
		
		
			break;
		default:
			current_state = RESET;
 3fc:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <current_state>
 400:	08 95       	ret

00000402 <main>:


    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Enable interrupt and set the overflow prescaler to 16 ms
	//TIM0_overflow_16us();
	TIM0_overflow_16ms();
 402:	85 b5       	in	r24, 0x25	; 37
 404:	8d 7f       	andi	r24, 0xFD	; 253
 406:	85 bd       	out	0x25, r24	; 37
 408:	85 b5       	in	r24, 0x25	; 37
 40a:	85 60       	ori	r24, 0x05	; 5
 40c:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 40e:	ee e6       	ldi	r30, 0x6E	; 110
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	81 60       	ori	r24, 0x01	; 1
 416:	80 83       	st	Z, r24
	
	TIM1_overflow_262ms();
 418:	e1 e8       	ldi	r30, 0x81	; 129
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	8b 7f       	andi	r24, 0xFB	; 251
 420:	80 83       	st	Z, r24
 422:	80 81       	ld	r24, Z
 424:	83 60       	ori	r24, 0x03	; 3
 426:	80 83       	st	Z, r24
	//TIM1_overflow_4ms();
	TIM1_overflow_interrupt_enable();
 428:	ef e6       	ldi	r30, 0x6F	; 111
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	81 60       	ori	r24, 0x01	; 1
 430:	80 83       	st	Z, r24
	//TIM2_overflow_interrupt_enable();
	
	
	
    // Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600, F_CPU));
 432:	87 e6       	ldi	r24, 0x67	; 103
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 3e 03 	call	0x67c	; 0x67c <uart_init>

    // Enables interrupts by setting the global interrupt mask
    sei();
 43a:	78 94       	sei
 43c:	ff cf       	rjmp	.-2      	; 0x43c <main+0x3a>

0000043e <__vector_16>:
/**
 * ISR starts when Timer/Counter1 overflows. Use single conversion mode
 * and start conversion four times per second.
 */
ISR(TIMER0_OVF_vect)
{
 43e:	1f 92       	push	r1
 440:	0f 92       	push	r0
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	0f 92       	push	r0
 446:	11 24       	eor	r1, r1
 448:	2f 93       	push	r18
 44a:	3f 93       	push	r19
 44c:	4f 93       	push	r20
 44e:	5f 93       	push	r21
 450:	6f 93       	push	r22
 452:	7f 93       	push	r23
 454:	8f 93       	push	r24
 456:	9f 93       	push	r25
 458:	af 93       	push	r26
 45a:	bf 93       	push	r27
 45c:	ef 93       	push	r30
 45e:	ff 93       	push	r31
	state_machine();
 460:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <state_machine>
}	
 464:	ff 91       	pop	r31
 466:	ef 91       	pop	r30
 468:	bf 91       	pop	r27
 46a:	af 91       	pop	r26
 46c:	9f 91       	pop	r25
 46e:	8f 91       	pop	r24
 470:	7f 91       	pop	r23
 472:	6f 91       	pop	r22
 474:	5f 91       	pop	r21
 476:	4f 91       	pop	r20
 478:	3f 91       	pop	r19
 47a:	2f 91       	pop	r18
 47c:	0f 90       	pop	r0
 47e:	0f be       	out	0x3f, r0	; 63
 480:	0f 90       	pop	r0
 482:	1f 90       	pop	r1
 484:	18 95       	reti

00000486 <__vector_9>:
	
	
	
ISR(TIMER2_OVF_vect)
{	
 486:	1f 92       	push	r1
 488:	0f 92       	push	r0
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	0f 92       	push	r0
 48e:	11 24       	eor	r1, r1
 490:	2f 93       	push	r18
 492:	8f 93       	push	r24
 494:	9f 93       	push	r25
 496:	af 93       	push	r26
 498:	bf 93       	push	r27
 49a:	ef 93       	push	r30
 49c:	ff 93       	push	r31
	static uint32_t count = 0;
	if(count == 1249)
 49e:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <count.2175>
 4a2:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <count.2175+0x1>
 4a6:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <count.2175+0x2>
 4aa:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <count.2175+0x3>
 4ae:	81 3e       	cpi	r24, 0xE1	; 225
 4b0:	94 40       	sbci	r25, 0x04	; 4
 4b2:	a1 05       	cpc	r26, r1
 4b4:	b1 05       	cpc	r27, r1
 4b6:	39 f4       	brne	.+14     	; 0x4c6 <__vector_9+0x40>
	{
		TIM2_overflow_interrupt_disable();
 4b8:	e0 e7       	ldi	r30, 0x70	; 112
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	80 81       	ld	r24, Z
 4be:	8e 7f       	andi	r24, 0xFE	; 254
 4c0:	80 83       	st	Z, r24
		current_state = RESET;
 4c2:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <current_state>
	}
	count++;
 4c6:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <count.2175>
 4ca:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <count.2175+0x1>
 4ce:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <count.2175+0x2>
 4d2:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <count.2175+0x3>
 4d6:	01 96       	adiw	r24, 0x01	; 1
 4d8:	a1 1d       	adc	r26, r1
 4da:	b1 1d       	adc	r27, r1
 4dc:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <count.2175>
 4e0:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <count.2175+0x1>
 4e4:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <count.2175+0x2>
 4e8:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <count.2175+0x3>

}
 4ec:	ff 91       	pop	r31
 4ee:	ef 91       	pop	r30
 4f0:	bf 91       	pop	r27
 4f2:	af 91       	pop	r26
 4f4:	9f 91       	pop	r25
 4f6:	8f 91       	pop	r24
 4f8:	2f 91       	pop	r18
 4fa:	0f 90       	pop	r0
 4fc:	0f be       	out	0x3f, r0	; 63
 4fe:	0f 90       	pop	r0
 500:	1f 90       	pop	r1
 502:	18 95       	reti

00000504 <__vector_13>:
/**
 * ISR starts when ADC completes the conversion. Display value on LCD
 * and send it to UART.
 */
ISR(TIMER1_OVF_vect)
{
 504:	1f 92       	push	r1
 506:	0f 92       	push	r0
 508:	0f b6       	in	r0, 0x3f	; 63
 50a:	0f 92       	push	r0
 50c:	11 24       	eor	r1, r1
 50e:	2f 93       	push	r18
 510:	3f 93       	push	r19
 512:	4f 93       	push	r20
 514:	5f 93       	push	r21
 516:	6f 93       	push	r22
 518:	7f 93       	push	r23
 51a:	8f 93       	push	r24
 51c:	9f 93       	push	r25
 51e:	af 93       	push	r26
 520:	bf 93       	push	r27
 522:	ef 93       	push	r30
 524:	ff 93       	push	r31
	static type_state prev_state = RESET;
	uart_puts("");
 526:	88 e6       	ldi	r24, 0x68	; 104
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <uart_puts>
	if(current_state != prev_state)
 52e:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <current_state>
 532:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
 536:	98 17       	cp	r25, r24
 538:	a1 f1       	breq	.+104    	; 0x5a2 <__vector_13+0x9e>
   {
	   // Send to uart
	   uart_puts("Current state: ");
 53a:	82 e2       	ldi	r24, 0x22	; 34
 53c:	91 e0       	ldi	r25, 0x01	; 1
 53e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <uart_puts>
	   switch(current_state)
 542:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <current_state>
 546:	82 30       	cpi	r24, 0x02	; 2
 548:	a9 f0       	breq	.+42     	; 0x574 <__vector_13+0x70>
 54a:	28 f4       	brcc	.+10     	; 0x556 <__vector_13+0x52>
 54c:	88 23       	and	r24, r24
 54e:	41 f0       	breq	.+16     	; 0x560 <__vector_13+0x5c>
 550:	81 30       	cpi	r24, 0x01	; 1
 552:	59 f0       	breq	.+22     	; 0x56a <__vector_13+0x66>
 554:	1e c0       	rjmp	.+60     	; 0x592 <__vector_13+0x8e>
 556:	83 30       	cpi	r24, 0x03	; 3
 558:	91 f0       	breq	.+36     	; 0x57e <__vector_13+0x7a>
 55a:	84 30       	cpi	r24, 0x04	; 4
 55c:	a9 f0       	breq	.+42     	; 0x588 <__vector_13+0x84>
 55e:	19 c0       	rjmp	.+50     	; 0x592 <__vector_13+0x8e>
	   {
			case RESET:
				uart_puts("RESET");
 560:	82 e3       	ldi	r24, 0x32	; 50
 562:	91 e0       	ldi	r25, 0x01	; 1
 564:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <uart_puts>
				break;
 568:	18 c0       	rjmp	.+48     	; 0x59a <__vector_13+0x96>
			case GET_CODE:
				uart_puts("GET_CODE");
 56a:	88 e3       	ldi	r24, 0x38	; 56
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <uart_puts>
				break;
 572:	13 c0       	rjmp	.+38     	; 0x59a <__vector_13+0x96>
			case CHECK_CODE:
				uart_puts("CHECK_CODE");
 574:	81 e4       	ldi	r24, 0x41	; 65
 576:	91 e0       	ldi	r25, 0x01	; 1
 578:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <uart_puts>
				break;
 57c:	0e c0       	rjmp	.+28     	; 0x59a <__vector_13+0x96>
			case DOOR_OPEN:
				uart_puts("DOOR_OPEN");
 57e:	8c e4       	ldi	r24, 0x4C	; 76
 580:	91 e0       	ldi	r25, 0x01	; 1
 582:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <uart_puts>
				break;
 586:	09 c0       	rjmp	.+18     	; 0x59a <__vector_13+0x96>
			case WRONG_CODE:
				uart_puts("WRONG_CODE");
 588:	86 e5       	ldi	r24, 0x56	; 86
 58a:	91 e0       	ldi	r25, 0x01	; 1
 58c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <uart_puts>
				break;
 590:	04 c0       	rjmp	.+8      	; 0x59a <__vector_13+0x96>
			default:
				uart_puts("ERROR");
 592:	81 e6       	ldi	r24, 0x61	; 97
 594:	91 e0       	ldi	r25, 0x01	; 1
 596:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <uart_puts>
	   }
	   uart_puts("\n");
 59a:	87 e6       	ldi	r24, 0x67	; 103
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <uart_puts>
   }
   
   
   prev_state = current_state;
 5a2:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <current_state>
 5a6:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
 5aa:	ff 91       	pop	r31
 5ac:	ef 91       	pop	r30
 5ae:	bf 91       	pop	r27
 5b0:	af 91       	pop	r26
 5b2:	9f 91       	pop	r25
 5b4:	8f 91       	pop	r24
 5b6:	7f 91       	pop	r23
 5b8:	6f 91       	pop	r22
 5ba:	5f 91       	pop	r21
 5bc:	4f 91       	pop	r20
 5be:	3f 91       	pop	r19
 5c0:	2f 91       	pop	r18
 5c2:	0f 90       	pop	r0
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	0f 90       	pop	r0
 5c8:	1f 90       	pop	r1
 5ca:	18 95       	reti

000005cc <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 5cc:	1f 92       	push	r1
 5ce:	0f 92       	push	r0
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	0f 92       	push	r0
 5d4:	11 24       	eor	r1, r1
 5d6:	2f 93       	push	r18
 5d8:	8f 93       	push	r24
 5da:	9f 93       	push	r25
 5dc:	ef 93       	push	r30
 5de:	ff 93       	push	r31
 5e0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 5e4:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 5e8:	8c 71       	andi	r24, 0x1C	; 28
 5ea:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <UART_RxHead>
 5ee:	ef 5f       	subi	r30, 0xFF	; 255
 5f0:	ef 71       	andi	r30, 0x1F	; 31
 5f2:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <UART_RxTail>
 5f6:	e9 17       	cp	r30, r25
 5f8:	39 f0       	breq	.+14     	; 0x608 <__vector_18+0x3c>
 5fa:	e0 93 72 01 	sts	0x0172, r30	; 0x800172 <UART_RxHead>
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	eb 58       	subi	r30, 0x8B	; 139
 602:	fe 4f       	sbci	r31, 0xFE	; 254
 604:	20 83       	st	Z, r18
 606:	01 c0       	rjmp	.+2      	; 0x60a <__vector_18+0x3e>
 608:	82 e0       	ldi	r24, 0x02	; 2
 60a:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <UART_LastRxError>
 60e:	89 2b       	or	r24, r25
 610:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <UART_LastRxError>
 614:	ff 91       	pop	r31
 616:	ef 91       	pop	r30
 618:	9f 91       	pop	r25
 61a:	8f 91       	pop	r24
 61c:	2f 91       	pop	r18
 61e:	0f 90       	pop	r0
 620:	0f be       	out	0x3f, r0	; 63
 622:	0f 90       	pop	r0
 624:	1f 90       	pop	r1
 626:	18 95       	reti

00000628 <__vector_19>:
 628:	1f 92       	push	r1
 62a:	0f 92       	push	r0
 62c:	0f b6       	in	r0, 0x3f	; 63
 62e:	0f 92       	push	r0
 630:	11 24       	eor	r1, r1
 632:	8f 93       	push	r24
 634:	9f 93       	push	r25
 636:	ef 93       	push	r30
 638:	ff 93       	push	r31
 63a:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <UART_TxHead>
 63e:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <UART_TxTail>
 642:	98 17       	cp	r25, r24
 644:	69 f0       	breq	.+26     	; 0x660 <__vector_19+0x38>
 646:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <UART_TxTail>
 64a:	ef 5f       	subi	r30, 0xFF	; 255
 64c:	ef 71       	andi	r30, 0x1F	; 31
 64e:	e0 93 73 01 	sts	0x0173, r30	; 0x800173 <UART_TxTail>
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	eb 56       	subi	r30, 0x6B	; 107
 656:	fe 4f       	sbci	r31, 0xFE	; 254
 658:	80 81       	ld	r24, Z
 65a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 65e:	05 c0       	rjmp	.+10     	; 0x66a <__vector_19+0x42>
 660:	e1 ec       	ldi	r30, 0xC1	; 193
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	80 81       	ld	r24, Z
 666:	8f 7d       	andi	r24, 0xDF	; 223
 668:	80 83       	st	Z, r24
 66a:	ff 91       	pop	r31
 66c:	ef 91       	pop	r30
 66e:	9f 91       	pop	r25
 670:	8f 91       	pop	r24
 672:	0f 90       	pop	r0
 674:	0f be       	out	0x3f, r0	; 63
 676:	0f 90       	pop	r0
 678:	1f 90       	pop	r1
 67a:	18 95       	reti

0000067c <uart_init>:
 67c:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <UART_TxHead>
 680:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <UART_TxTail>
 684:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <UART_RxHead>
 688:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <UART_RxTail>
 68c:	99 23       	and	r25, r25
 68e:	1c f4       	brge	.+6      	; 0x696 <uart_init+0x1a>
 690:	22 e0       	ldi	r18, 0x02	; 2
 692:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 696:	90 78       	andi	r25, 0x80	; 128
 698:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 69c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 6a0:	88 e9       	ldi	r24, 0x98	; 152
 6a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 6a6:	86 e0       	ldi	r24, 0x06	; 6
 6a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 6ac:	08 95       	ret

000006ae <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 6ae:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <UART_TxHead>
 6b2:	2f 5f       	subi	r18, 0xFF	; 255
 6b4:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 6b6:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <UART_TxTail>
 6ba:	29 17       	cp	r18, r25
 6bc:	e1 f3       	breq	.-8      	; 0x6b6 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 6be:	e2 2f       	mov	r30, r18
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	eb 56       	subi	r30, 0x6B	; 107
 6c4:	fe 4f       	sbci	r31, 0xFE	; 254
 6c6:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 6c8:	20 93 74 01 	sts	0x0174, r18	; 0x800174 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 6cc:	e1 ec       	ldi	r30, 0xC1	; 193
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	80 81       	ld	r24, Z
 6d2:	80 62       	ori	r24, 0x20	; 32
 6d4:	80 83       	st	Z, r24
 6d6:	08 95       	ret

000006d8 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
 6dc:	ec 01       	movw	r28, r24
    while (*s)
 6de:	88 81       	ld	r24, Y
 6e0:	88 23       	and	r24, r24
 6e2:	31 f0       	breq	.+12     	; 0x6f0 <uart_puts+0x18>
 6e4:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 6e6:	0e 94 57 03 	call	0x6ae	; 0x6ae <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 6ea:	89 91       	ld	r24, Y+
 6ec:	81 11       	cpse	r24, r1
 6ee:	fb cf       	rjmp	.-10     	; 0x6e6 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 6f0:	df 91       	pop	r29
 6f2:	cf 91       	pop	r28
 6f4:	08 95       	ret

000006f6 <_exit>:
 6f6:	f8 94       	cli

000006f8 <__stop_program>:
 6f8:	ff cf       	rjmp	.-2      	; 0x6f8 <__stop_program>
