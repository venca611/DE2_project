
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  000009cc  00000a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  008001b4  008001b4  00000b14  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ca6  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c61  00000000  00000000  000029aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f57  00000000  00000000  0000360b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000454  00000000  00000000  00004564  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006dd  00000000  00000000  000049b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001164  00000000  00000000  00005095  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  000061f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 1a 04 	jmp	0x834	; 0x834 <__vector_18>
  4c:	0c 94 48 04 	jmp	0x890	; 0x890 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 3b       	cpi	r26, 0xB4	; 180
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 eb       	ldi	r26, 0xB4	; 180
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 aa 02 	call	0x554	; 0x554 <main>
  9e:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_toggle>:
/*--------------------------------------------------------------------*/
/* GPIO_toggle */
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	//na danem bitu adresy nastavi negaci bitu
	*reg_name ^= (1<<pin_num);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_toggle+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_toggle+0xa>
  b8:	24 27       	eor	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_read>:
/* GPIO_read */
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	// kdyz je dany bit na dane adrese 0
	// tak se vrati 0 jinak 1
	if(bit_is_clear(*reg_name, pin_num))
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <GPIO_read+0xc>
  c6:	95 95       	asr	r25
  c8:	87 95       	ror	r24
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <GPIO_read+0x8>
		return 0;
	else
		return 1;
  ce:	81 70       	andi	r24, 0x01	; 1
  d0:	08 95       	ret

000000d2 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  d2:	29 9a       	sbi	0x05, 1	; 5
  d4:	85 e0       	ldi	r24, 0x05	; 5
  d6:	8a 95       	dec	r24
  d8:	f1 f7       	brne	.-4      	; 0xd6 <toggle_e+0x4>
  da:	00 00       	nop
  dc:	29 98       	cbi	0x05, 1	; 5
  de:	08 95       	ret

000000e0 <lcd_write>:
  e0:	cf 93       	push	r28
  e2:	c8 2f       	mov	r28, r24
  e4:	66 23       	and	r22, r22
  e6:	11 f0       	breq	.+4      	; 0xec <lcd_write+0xc>
  e8:	28 9a       	sbi	0x05, 0	; 5
  ea:	01 c0       	rjmp	.+2      	; 0xee <lcd_write+0xe>
  ec:	28 98       	cbi	0x05, 0	; 5
  ee:	54 9a       	sbi	0x0a, 4	; 10
  f0:	55 9a       	sbi	0x0a, 5	; 10
  f2:	56 9a       	sbi	0x0a, 6	; 10
  f4:	57 9a       	sbi	0x0a, 7	; 10
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	5e 98       	cbi	0x0b, 6	; 11
  fa:	5d 98       	cbi	0x0b, 5	; 11
  fc:	5c 98       	cbi	0x0b, 4	; 11
  fe:	cc 23       	and	r28, r28
 100:	0c f4       	brge	.+2      	; 0x104 <lcd_write+0x24>
 102:	5f 9a       	sbi	0x0b, 7	; 11
 104:	c6 fd       	sbrc	r28, 6
 106:	5e 9a       	sbi	0x0b, 6	; 11
 108:	c5 fd       	sbrc	r28, 5
 10a:	5d 9a       	sbi	0x0b, 5	; 11
 10c:	c4 fd       	sbrc	r28, 4
 10e:	5c 9a       	sbi	0x0b, 4	; 11
 110:	0e 94 69 00 	call	0xd2	; 0xd2 <toggle_e>
 114:	5f 98       	cbi	0x0b, 7	; 11
 116:	5e 98       	cbi	0x0b, 6	; 11
 118:	5d 98       	cbi	0x0b, 5	; 11
 11a:	5c 98       	cbi	0x0b, 4	; 11
 11c:	c3 fd       	sbrc	r28, 3
 11e:	5f 9a       	sbi	0x0b, 7	; 11
 120:	c2 fd       	sbrc	r28, 2
 122:	5e 9a       	sbi	0x0b, 6	; 11
 124:	c1 fd       	sbrc	r28, 1
 126:	5d 9a       	sbi	0x0b, 5	; 11
 128:	c0 fd       	sbrc	r28, 0
 12a:	5c 9a       	sbi	0x0b, 4	; 11
 12c:	0e 94 69 00 	call	0xd2	; 0xd2 <toggle_e>
 130:	5c 9a       	sbi	0x0b, 4	; 11
 132:	5d 9a       	sbi	0x0b, 5	; 11
 134:	5e 9a       	sbi	0x0b, 6	; 11
 136:	5f 9a       	sbi	0x0b, 7	; 11
 138:	87 eb       	ldi	r24, 0xB7	; 183
 13a:	9b e0       	ldi	r25, 0x0B	; 11
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_write+0x5c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_write+0x62>
 142:	00 00       	nop
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <lcd_command>:
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_write>
 14e:	08 95       	ret

00000150 <lcd_data>:
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_write>
 156:	08 95       	ret

00000158 <lcd_gotoxy>:
 158:	61 11       	cpse	r22, r1
 15a:	04 c0       	rjmp	.+8      	; 0x164 <lcd_gotoxy+0xc>
 15c:	80 58       	subi	r24, 0x80	; 128
 15e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 162:	08 95       	ret
 164:	80 54       	subi	r24, 0x40	; 64
 166:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 16a:	08 95       	ret

0000016c <lcd_clrscr>:
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 172:	08 95       	ret

00000174 <lcd_putc>:
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_write>
 17a:	08 95       	ret

0000017c <lcd_puts>:
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ec 01       	movw	r28, r24
 182:	21 96       	adiw	r28, 0x01	; 1
 184:	fc 01       	movw	r30, r24
 186:	80 81       	ld	r24, Z
 188:	88 23       	and	r24, r24
 18a:	29 f0       	breq	.+10     	; 0x196 <lcd_puts+0x1a>
 18c:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_putc>
 190:	89 91       	ld	r24, Y+
 192:	81 11       	cpse	r24, r1
 194:	fb cf       	rjmp	.-10     	; 0x18c <lcd_puts+0x10>
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 19c:	cf 93       	push	r28
 19e:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1a0:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1a2:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1a4:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1a6:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1a8:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1aa:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1ac:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	99 ef       	ldi	r25, 0xF9	; 249
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x16>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_init+0x1c>
 1b8:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 1ba:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 1bc:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 1be:	0e 94 69 00 	call	0xd2	; 0xd2 <toggle_e>
 1c2:	8f e1       	ldi	r24, 0x1F	; 31
 1c4:	9e e4       	ldi	r25, 0x4E	; 78
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_init+0x2a>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <lcd_init+0x30>
 1cc:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1ce:	0e 94 69 00 	call	0xd2	; 0xd2 <toggle_e>
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcd_init+0x3a>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <lcd_init+0x40>
 1dc:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1de:	0e 94 69 00 	call	0xd2	; 0xd2 <toggle_e>
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_init+0x4a>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <lcd_init+0x50>
 1ec:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1ee:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1f0:	0e 94 69 00 	call	0xd2	; 0xd2 <toggle_e>
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_init+0x5c>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <lcd_init+0x62>
 1fe:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 200:	88 e2       	ldi	r24, 0x28	; 40
 202:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 206:	88 e0       	ldi	r24, 0x08	; 8
 208:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 20c:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 210:	86 e0       	ldi	r24, 0x06	; 6
 212:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 216:	8c 2f       	mov	r24, r28
 218:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
}/* lcd_init */
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <reset>:
} type_state;

type_state current_state = RESET;

void reset(void)
{
 220:	0f 93       	push	r16
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
	
	
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 228:	80 e4       	ldi	r24, 0x40	; 64
 22a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 22e:	c4 e0       	ldi	r28, 0x04	; 4
 230:	d1 e0       	ldi	r29, 0x01	; 1
 232:	04 e1       	ldi	r16, 0x14	; 20
 234:	11 e0       	ldi	r17, 0x01	; 1
	for (uint8_t i = 0; i < 8*2; i++) //0,1,2,3 ,4,5,6,7
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 236:	89 91       	ld	r24, Y+
 238:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_data>
{
	
	
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 8*2; i++) //0,1,2,3 ,4,5,6,7
 23c:	c0 17       	cp	r28, r16
 23e:	d1 07       	cpc	r29, r17
 240:	d1 f7       	brne	.-12     	; 0x236 <reset+0x16>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 242:	80 e8       	ldi	r24, 0x80	; 128
 244:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>

	// Initialize LCD display
	lcd_clrscr();
 248:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_clrscr>
	// Display custom characters
	lcd_putc(0);
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_putc>
	lcd_gotoxy(15, 0);
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	8f e0       	ldi	r24, 0x0F	; 15
 256:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_gotoxy>
	lcd_putc(0);
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_putc>
	lcd_gotoxy(0, 1);
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_gotoxy>
	lcd_putc(1);
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_putc>
	lcd_gotoxy(15, 1);
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	8f e0       	ldi	r24, 0x0F	; 15
 272:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_gotoxy>
	lcd_putc(1);
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_putc>
	
	//lcd_gotoxy(1, 1);
	//lcd_puts("Welcome Bachhh");
	

	lcd_gotoxy(1, 0);
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_gotoxy>
	lcd_puts("Password:____");
 284:	84 e1       	ldi	r24, 0x14	; 20
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_puts>
	//_delay_ms(2000);
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	08 95       	ret

00000296 <getkey>:

uint8_t getkey()
{
 296:	cf 92       	push	r12
 298:	df 92       	push	r13
 29a:	ef 92       	push	r14
 29c:	ff 92       	push	r15
 29e:	0f 93       	push	r16
 2a0:	1f 93       	push	r17
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
	uint8_t row, col;
	DDRC&=~(0x7F);
 2a6:	87 b1       	in	r24, 0x07	; 7
 2a8:	80 78       	andi	r24, 0x80	; 128
 2aa:	87 b9       	out	0x07, r24	; 7
	PORTC|=0x0F;
 2ac:	88 b1       	in	r24, 0x08	; 8
 2ae:	8f 60       	ori	r24, 0x0F	; 15
 2b0:	88 b9       	out	0x08, r24	; 8
 2b2:	00 e0       	ldi	r16, 0x00	; 0
 2b4:	10 e0       	ldi	r17, 0x00	; 0
	for(col=0;col<3;col++)
	{
		DDRC|=(0x10<<col);
 2b6:	68 94       	set
 2b8:	cc 24       	eor	r12, r12
 2ba:	c4 f8       	bld	r12, 4
 2bc:	d1 2c       	mov	r13, r1
 2be:	d0 2f       	mov	r29, r16
 2c0:	97 b1       	in	r25, 0x07	; 7
 2c2:	76 01       	movw	r14, r12
 2c4:	00 2e       	mov	r0, r16
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <getkey+0x36>
 2c8:	ee 0c       	add	r14, r14
 2ca:	ff 1c       	adc	r15, r15
 2cc:	0a 94       	dec	r0
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <getkey+0x32>
 2d0:	9e 29       	or	r25, r14
 2d2:	97 b9       	out	0x07, r25	; 7
		if(!GPIO_read(&PINC, 0))
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	86 e2       	ldi	r24, 0x26	; 38
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_read>
 2de:	88 23       	and	r24, r24
 2e0:	e9 f0       	breq	.+58     	; 0x31c <getkey+0x86>
 2e2:	c0 e0       	ldi	r28, 0x00	; 0
			return(-1);
		for(row=0;row<4;row++)
			if(!GPIO_read(&PINC, row))
 2e4:	6c 2f       	mov	r22, r28
 2e6:	86 e2       	ldi	r24, 0x26	; 38
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_read>
 2ee:	81 11       	cpse	r24, r1
 2f0:	07 c0       	rjmp	.+14     	; 0x300 <getkey+0x6a>
				return(row*3+col+1);
 2f2:	8c 2f       	mov	r24, r28
 2f4:	88 0f       	add	r24, r24
 2f6:	c8 0f       	add	r28, r24
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	8d 0f       	add	r24, r29
 2fc:	8c 0f       	add	r24, r28
 2fe:	0f c0       	rjmp	.+30     	; 0x31e <getkey+0x88>
	for(col=0;col<3;col++)
	{
		DDRC|=(0x10<<col);
		if(!GPIO_read(&PINC, 0))
			return(-1);
		for(row=0;row<4;row++)
 300:	cf 5f       	subi	r28, 0xFF	; 255
 302:	c4 30       	cpi	r28, 0x04	; 4
 304:	79 f7       	brne	.-34     	; 0x2e4 <getkey+0x4e>
			if(!GPIO_read(&PINC, row))
				return(row*3+col+1);
		DDRC&=~(0x10<<col);
 306:	87 b1       	in	r24, 0x07	; 7
 308:	e0 94       	com	r14
 30a:	e8 22       	and	r14, r24
 30c:	e7 b8       	out	0x07, r14	; 7
 30e:	0f 5f       	subi	r16, 0xFF	; 255
 310:	1f 4f       	sbci	r17, 0xFF	; 255
uint8_t getkey()
{
	uint8_t row, col;
	DDRC&=~(0x7F);
	PORTC|=0x0F;
	for(col=0;col<3;col++)
 312:	03 30       	cpi	r16, 0x03	; 3
 314:	11 05       	cpc	r17, r1
 316:	99 f6       	brne	.-90     	; 0x2be <getkey+0x28>
		for(row=0;row<4;row++)
			if(!GPIO_read(&PINC, row))
				return(row*3+col+1);
		DDRC&=~(0x10<<col);
	}
	return 0;//Indicate No key pressed
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	01 c0       	rjmp	.+2      	; 0x31e <getkey+0x88>
	PORTC|=0x0F;
	for(col=0;col<3;col++)
	{
		DDRC|=(0x10<<col);
		if(!GPIO_read(&PINC, 0))
			return(-1);
 31c:	8f ef       	ldi	r24, 0xFF	; 255
			if(!GPIO_read(&PINC, row))
				return(row*3+col+1);
		DDRC&=~(0x10<<col);
	}
	return 0;//Indicate No key pressed
}
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	ff 90       	pop	r15
 328:	ef 90       	pop	r14
 32a:	df 90       	pop	r13
 32c:	cf 90       	pop	r12
 32e:	08 95       	ret

00000330 <get_code>:

void get_code(uint8_t* code)
{
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	00 d0       	rcall	.+0      	; 0x33a <get_code+0xa>
 33a:	00 d0       	rcall	.+0      	; 0x33c <get_code+0xc>
 33c:	1f 92       	push	r1
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
 342:	8c 01       	movw	r16, r24
	TIM2_overflow_16ms()
 344:	e1 eb       	ldi	r30, 0xB1	; 177
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	87 60       	ori	r24, 0x07	; 7
 34c:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 34e:	e0 e7       	ldi	r30, 0x70	; 112
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	81 60       	ori	r24, 0x01	; 1
 356:	80 83       	st	Z, r24
	uint8_t key = getkey();
 358:	0e 94 4b 01 	call	0x296	; 0x296 <getkey>
	if (key!=0)
 35c:	88 23       	and	r24, r24
 35e:	09 f4       	brne	.+2      	; 0x362 <get_code+0x32>
 360:	4b c0       	rjmp	.+150    	; 0x3f8 <get_code+0xc8>
	{
		switch(key)
 362:	8a 30       	cpi	r24, 0x0A	; 10
 364:	19 f0       	breq	.+6      	; 0x36c <get_code+0x3c>
 366:	8c 30       	cpi	r24, 0x0C	; 12
 368:	61 f0       	breq	.+24     	; 0x382 <get_code+0x52>
 36a:	06 c0       	rjmp	.+12     	; 0x378 <get_code+0x48>
				TIM2_overflow_interrupt_disable();
				current_state = CHECK_CODE; //ma se provest kontrola hesla a pripadne dalsi zmeny
				break;
			case 10:
				for(uint8_t i=3;i>=0;i--)
					if(code[i]!=10)
 36c:	f8 01       	movw	r30, r16
 36e:	83 81       	ldd	r24, Z+3	; 0x03
 370:	8a 30       	cpi	r24, 0x0A	; 10
 372:	81 f4       	brne	.+32     	; 0x394 <get_code+0x64>
 374:	83 e0       	ldi	r24, 0x03	; 3
 376:	1c c0       	rjmp	.+56     	; 0x3b0 <get_code+0x80>
					}
				_delay_ms(250);
					break;
			default:
				for(uint8_t j=0;j<4;j++)
					if(code[j]==10)
 378:	f8 01       	movw	r30, r16
 37a:	90 81       	ld	r25, Z
 37c:	9a 30       	cpi	r25, 0x0A	; 10
 37e:	01 f5       	brne	.+64     	; 0x3c0 <get_code+0x90>
 380:	2c c0       	rjmp	.+88     	; 0x3da <get_code+0xaa>
	if (key!=0)
	{
		switch(key)
		{
			case 12:
				TIM2_overflow_interrupt_disable();
 382:	e0 e7       	ldi	r30, 0x70	; 112
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	8e 7f       	andi	r24, 0xFE	; 254
 38a:	80 83       	st	Z, r24
				current_state = CHECK_CODE; //ma se provest kontrola hesla a pripadne dalsi zmeny
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <current_state>
				break;
 392:	32 c0       	rjmp	.+100    	; 0x3f8 <get_code+0xc8>
			case 10:
				for(uint8_t i=3;i>=0;i--)
					if(code[i]!=10)
 394:	f8 01       	movw	r30, r16
 396:	33 96       	adiw	r30, 0x03	; 3
					{
						code[i]=10;
 398:	8a e0       	ldi	r24, 0x0A	; 10
 39a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39c:	ff ef       	ldi	r31, 0xFF	; 255
 39e:	24 e3       	ldi	r18, 0x34	; 52
 3a0:	8c e0       	ldi	r24, 0x0C	; 12
 3a2:	f1 50       	subi	r31, 0x01	; 1
 3a4:	20 40       	sbci	r18, 0x00	; 0
 3a6:	80 40       	sbci	r24, 0x00	; 0
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <get_code+0x72>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <get_code+0x7c>
 3ac:	00 00       	nop
 3ae:	24 c0       	rjmp	.+72     	; 0x3f8 <get_code+0xc8>
			case 12:
				TIM2_overflow_interrupt_disable();
				current_state = CHECK_CODE; //ma se provest kontrola hesla a pripadne dalsi zmeny
				break;
			case 10:
				for(uint8_t i=3;i>=0;i--)
 3b0:	81 50       	subi	r24, 0x01	; 1
					if(code[i]!=10)
 3b2:	f8 01       	movw	r30, r16
 3b4:	e8 0f       	add	r30, r24
 3b6:	f1 1d       	adc	r31, r1
 3b8:	90 81       	ld	r25, Z
 3ba:	9a 30       	cpi	r25, 0x0A	; 10
 3bc:	c9 f3       	breq	.-14     	; 0x3b0 <get_code+0x80>
 3be:	ec cf       	rjmp	.-40     	; 0x398 <get_code+0x68>
 3c0:	98 01       	movw	r18, r16
 3c2:	2f 5f       	subi	r18, 0xFF	; 255
 3c4:	3f 4f       	sbci	r19, 0xFF	; 255
 3c6:	a8 01       	movw	r20, r16
 3c8:	4c 5f       	subi	r20, 0xFC	; 252
 3ca:	5f 4f       	sbci	r21, 0xFF	; 255
					}
				_delay_ms(250);
					break;
			default:
				for(uint8_t j=0;j<4;j++)
					if(code[j]==10)
 3cc:	f9 01       	movw	r30, r18
 3ce:	2f 5f       	subi	r18, 0xFF	; 255
 3d0:	3f 4f       	sbci	r19, 0xFF	; 255
 3d2:	90 81       	ld	r25, Z
 3d4:	9a 30       	cpi	r25, 0x0A	; 10
 3d6:	21 f4       	brne	.+8      	; 0x3e0 <get_code+0xb0>
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <get_code+0xac>
 3da:	f8 01       	movw	r30, r16
					{
						code[j]=key;
 3dc:	80 83       	st	Z, r24
						break;
 3de:	03 c0       	rjmp	.+6      	; 0x3e6 <get_code+0xb6>
						break;
					}
				_delay_ms(250);
					break;
			default:
				for(uint8_t j=0;j<4;j++)
 3e0:	42 17       	cp	r20, r18
 3e2:	53 07       	cpc	r21, r19
 3e4:	99 f7       	brne	.-26     	; 0x3cc <get_code+0x9c>
 3e6:	9f ef       	ldi	r25, 0xFF	; 255
 3e8:	e4 e3       	ldi	r30, 0x34	; 52
 3ea:	fc e0       	ldi	r31, 0x0C	; 12
 3ec:	91 50       	subi	r25, 0x01	; 1
 3ee:	e0 40       	sbci	r30, 0x00	; 0
 3f0:	f0 40       	sbci	r31, 0x00	; 0
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <get_code+0xbc>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <get_code+0xc6>
 3f6:	00 00       	nop
						break;
					}
				_delay_ms(250);
		} //pokud nedochazi ke kontrole hesla, je treba vlozit malou pauzu (cca 0,5s), aby nedochazelo k duplikaci stisknuteho tlacitka
	}
char password[] = "    ";
 3f8:	85 e0       	ldi	r24, 0x05	; 5
 3fa:	e2 e2       	ldi	r30, 0x22	; 34
 3fc:	f1 e0       	ldi	r31, 0x01	; 1
 3fe:	de 01       	movw	r26, r28
 400:	11 96       	adiw	r26, 0x01	; 1
 402:	01 90       	ld	r0, Z+
 404:	0d 92       	st	X+, r0
 406:	8a 95       	dec	r24
 408:	e1 f7       	brne	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
    lcd_gotoxy(10, 0);
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	8a e0       	ldi	r24, 0x0A	; 10
 40e:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_gotoxy>
 412:	d8 01       	movw	r26, r16
 414:	fe 01       	movw	r30, r28
 416:	31 96       	adiw	r30, 0x01	; 1
 418:	9e 01       	movw	r18, r28
 41a:	2b 5f       	subi	r18, 0xFB	; 251
 41c:	3f 4f       	sbci	r19, 0xFF	; 255
    for(uint8_t i = 0; i < 4; i++){
        password[i] = (code[i] == 10)? '_': '*';
 41e:	8d 91       	ld	r24, X+
 420:	8a 30       	cpi	r24, 0x0A	; 10
 422:	11 f0       	breq	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 424:	8a e2       	ldi	r24, 0x2A	; 42
 426:	01 c0       	rjmp	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 428:	8f e5       	ldi	r24, 0x5F	; 95
 42a:	81 93       	st	Z+, r24
				_delay_ms(250);
		} //pokud nedochazi ke kontrole hesla, je treba vlozit malou pauzu (cca 0,5s), aby nedochazelo k duplikaci stisknuteho tlacitka
	}
char password[] = "    ";
    lcd_gotoxy(10, 0);
    for(uint8_t i = 0; i < 4; i++){
 42c:	e2 17       	cp	r30, r18
 42e:	f3 07       	cpc	r31, r19
 430:	b1 f7       	brne	.-20     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
        password[i] = (code[i] == 10)? '_': '*';
    }
    lcd_puts(password);   
 432:	ce 01       	movw	r24, r28
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_puts>
}
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	0f 90       	pop	r0
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	1f 91       	pop	r17
 44a:	0f 91       	pop	r16
 44c:	08 95       	ret

0000044e <check_code>:

bool check_code(uint8_t* code)
{
 44e:	fc 01       	movw	r30, r24
	//codes are 4242, 0123, 9876
	if((code[0]==4)&&(code[1]==2)&&(code[2]==4)&&(code[3]==2))
 450:	80 81       	ld	r24, Z
 452:	84 30       	cpi	r24, 0x04	; 4
 454:	99 f4       	brne	.+38     	; 0x47c <check_code+0x2e>
 456:	81 81       	ldd	r24, Z+1	; 0x01
 458:	82 30       	cpi	r24, 0x02	; 2
 45a:	d1 f5       	brne	.+116    	; 0x4d0 <check_code+0x82>
 45c:	82 81       	ldd	r24, Z+2	; 0x02
 45e:	84 30       	cpi	r24, 0x04	; 4
 460:	c9 f5       	brne	.+114    	; 0x4d4 <check_code+0x86>
 462:	83 81       	ldd	r24, Z+3	; 0x03
 464:	82 30       	cpi	r24, 0x02	; 2
 466:	c1 f5       	brne	.+112    	; 0x4d8 <check_code+0x8a>
	{
		lcd_gotoxy(1, 1);
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_gotoxy>
		lcd_puts("Welcome User1");
 470:	87 e2       	ldi	r24, 0x27	; 39
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_puts>
		return 1;
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	08 95       	ret
	}
	else if((code[0]==11)&&(code[1]==1)&&(code[2]==2)&&(code[3]==3))
 47c:	8b 30       	cpi	r24, 0x0B	; 11
 47e:	99 f4       	brne	.+38     	; 0x4a6 <check_code+0x58>
 480:	81 81       	ldd	r24, Z+1	; 0x01
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	59 f5       	brne	.+86     	; 0x4dc <check_code+0x8e>
 486:	82 81       	ldd	r24, Z+2	; 0x02
 488:	82 30       	cpi	r24, 0x02	; 2
 48a:	51 f5       	brne	.+84     	; 0x4e0 <check_code+0x92>
 48c:	83 81       	ldd	r24, Z+3	; 0x03
 48e:	83 30       	cpi	r24, 0x03	; 3
 490:	49 f5       	brne	.+82     	; 0x4e4 <check_code+0x96>
	{
		lcd_gotoxy(1, 1);
 492:	61 e0       	ldi	r22, 0x01	; 1
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_gotoxy>
		lcd_puts("Welcome User2");
 49a:	85 e3       	ldi	r24, 0x35	; 53
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_puts>
		return 1;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	08 95       	ret
	}
	else if((code[0]==9)&&(code[1]==8)&&(code[2]==7)&&(code[3]==4))
 4a6:	89 30       	cpi	r24, 0x09	; 9
 4a8:	f9 f4       	brne	.+62     	; 0x4e8 <check_code+0x9a>
 4aa:	81 81       	ldd	r24, Z+1	; 0x01
 4ac:	88 30       	cpi	r24, 0x08	; 8
 4ae:	f1 f4       	brne	.+60     	; 0x4ec <check_code+0x9e>
 4b0:	82 81       	ldd	r24, Z+2	; 0x02
 4b2:	87 30       	cpi	r24, 0x07	; 7
 4b4:	e9 f4       	brne	.+58     	; 0x4f0 <check_code+0xa2>
 4b6:	83 81       	ldd	r24, Z+3	; 0x03
 4b8:	84 30       	cpi	r24, 0x04	; 4
 4ba:	e1 f4       	brne	.+56     	; 0x4f4 <check_code+0xa6>
	{
		lcd_gotoxy(1, 1);
 4bc:	61 e0       	ldi	r22, 0x01	; 1
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_gotoxy>
		lcd_puts("Welcome User3");
 4c4:	83 e4       	ldi	r24, 0x43	; 67
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_puts>
		return 1;
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	08 95       	ret
	}
	else return 0;
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	08 95       	ret
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	08 95       	ret
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	08 95       	ret
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	08 95       	ret
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	08 95       	ret
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	08 95       	ret
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	08 95       	ret
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	08 95       	ret
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	08 95       	ret
 4f4:	80 e0       	ldi	r24, 0x00	; 0
	
	
}
 4f6:	08 95       	ret

000004f8 <state_machine>:

//funkce a procedury
void state_machine(void)
{
	static uint8_t code[4]={10,10,10,10};
	switch (current_state)
 4f8:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <current_state>
 4fc:	82 30       	cpi	r24, 0x02	; 2
 4fe:	d9 f0       	breq	.+54     	; 0x536 <state_machine+0x3e>
 500:	28 f4       	brcc	.+10     	; 0x50c <state_machine+0x14>
 502:	88 23       	and	r24, r24
 504:	31 f0       	breq	.+12     	; 0x512 <state_machine+0x1a>
 506:	81 30       	cpi	r24, 0x01	; 1
 508:	89 f0       	breq	.+34     	; 0x52c <state_machine+0x34>
 50a:	21 c0       	rjmp	.+66     	; 0x54e <state_machine+0x56>
 50c:	85 30       	cpi	r24, 0x05	; 5
 50e:	08 f1       	brcs	.+66     	; 0x552 <state_machine+0x5a>
 510:	1e c0       	rjmp	.+60     	; 0x54e <state_machine+0x56>
	{
		case RESET:
			reset();
 512:	0e 94 10 01 	call	0x220	; 0x220 <reset>
			for(uint8_t i = 0; i < 4; i++)
				code[i]=10;
 516:	e0 e0       	ldi	r30, 0x00	; 0
 518:	f1 e0       	ldi	r31, 0x01	; 1
 51a:	8a e0       	ldi	r24, 0x0A	; 10
 51c:	80 83       	st	Z, r24
 51e:	81 83       	std	Z+1, r24	; 0x01
 520:	82 83       	std	Z+2, r24	; 0x02
 522:	83 83       	std	Z+3, r24	; 0x03
			current_state = GET_CODE;
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <current_state>
			break;
 52a:	08 95       	ret
		case GET_CODE:
			get_code(code);
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	0e 94 98 01 	call	0x330	; 0x330 <get_code>
			break;
 534:	08 95       	ret
		case CHECK_CODE:
			current_state = check_code(code)?DOOR_OPEN:WRONG_CODE;
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	0e 94 27 02 	call	0x44e	; 0x44e <check_code>
 53e:	81 11       	cpse	r24, r1
 540:	02 c0       	rjmp	.+4      	; 0x546 <state_machine+0x4e>
 542:	84 e0       	ldi	r24, 0x04	; 4
 544:	01 c0       	rjmp	.+2      	; 0x548 <state_machine+0x50>
 546:	83 e0       	ldi	r24, 0x03	; 3
 548:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <current_state>
			break;
 54c:	08 95       	ret
		case DOOR_OPEN:		
			break;
		case WRONG_CODE:		
			break;
		default:
			current_state = RESET;
 54e:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <current_state>
 552:	08 95       	ret

00000554 <main>:
 * and UART.
 */
int main(void)
{	
	
	DDRB|=(0x0C);
 554:	84 b1       	in	r24, 0x04	; 4
 556:	8c 60       	ori	r24, 0x0C	; 12
 558:	84 b9       	out	0x04, r24	; 4
	PORTB&=~(0x0C);
 55a:	85 b1       	in	r24, 0x05	; 5
 55c:	83 7f       	andi	r24, 0xF3	; 243
 55e:	85 b9       	out	0x05, r24	; 5

    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Enable interrupt and set the overflow prescaler to 16 ms
	//TIM0_overflow_16us();
	TIM0_overflow_16ms();
 560:	85 b5       	in	r24, 0x25	; 37
 562:	8d 7f       	andi	r24, 0xFD	; 253
 564:	85 bd       	out	0x25, r24	; 37
 566:	85 b5       	in	r24, 0x25	; 37
 568:	85 60       	ori	r24, 0x05	; 5
 56a:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 56c:	ee e6       	ldi	r30, 0x6E	; 110
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	81 60       	ori	r24, 0x01	; 1
 574:	80 83       	st	Z, r24
	
	TIM1_overflow_262ms();
 576:	e1 e8       	ldi	r30, 0x81	; 129
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	8b 7f       	andi	r24, 0xFB	; 251
 57e:	80 83       	st	Z, r24
 580:	80 81       	ld	r24, Z
 582:	83 60       	ori	r24, 0x03	; 3
 584:	80 83       	st	Z, r24
	//TIM1_overflow_4ms();
	TIM1_overflow_interrupt_enable();
 586:	ef e6       	ldi	r30, 0x6F	; 111
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	81 60       	ori	r24, 0x01	; 1
 58e:	80 83       	st	Z, r24
	
	
	
	lcd_init(LCD_DISP_ON);
 590:	8c e0       	ldi	r24, 0x0C	; 12
 592:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_init>
	
    // Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600, F_CPU));
 596:	87 e6       	ldi	r24, 0x67	; 103
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <uart_init>

    // Enables interrupts by setting the global interrupt mask
    sei();
 59e:	78 94       	sei
 5a0:	ff cf       	rjmp	.-2      	; 0x5a0 <main+0x4c>

000005a2 <__vector_16>:
/**
 * ISR starts when Timer/Counter1 overflows. Use single conversion mode
 * and start conversion four times per second.
 */
ISR(TIMER0_OVF_vect)
{
 5a2:	1f 92       	push	r1
 5a4:	0f 92       	push	r0
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	0f 92       	push	r0
 5aa:	11 24       	eor	r1, r1
 5ac:	2f 93       	push	r18
 5ae:	3f 93       	push	r19
 5b0:	4f 93       	push	r20
 5b2:	5f 93       	push	r21
 5b4:	6f 93       	push	r22
 5b6:	7f 93       	push	r23
 5b8:	8f 93       	push	r24
 5ba:	9f 93       	push	r25
 5bc:	af 93       	push	r26
 5be:	bf 93       	push	r27
 5c0:	ef 93       	push	r30
 5c2:	ff 93       	push	r31
	state_machine();
 5c4:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <state_machine>
}	
 5c8:	ff 91       	pop	r31
 5ca:	ef 91       	pop	r30
 5cc:	bf 91       	pop	r27
 5ce:	af 91       	pop	r26
 5d0:	9f 91       	pop	r25
 5d2:	8f 91       	pop	r24
 5d4:	7f 91       	pop	r23
 5d6:	6f 91       	pop	r22
 5d8:	5f 91       	pop	r21
 5da:	4f 91       	pop	r20
 5dc:	3f 91       	pop	r19
 5de:	2f 91       	pop	r18
 5e0:	0f 90       	pop	r0
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	0f 90       	pop	r0
 5e6:	1f 90       	pop	r1
 5e8:	18 95       	reti

000005ea <__vector_13>:
/* -------------------------------------------------------------------*/
/**
 * UART
 */
ISR(TIMER1_OVF_vect)
{
 5ea:	1f 92       	push	r1
 5ec:	0f 92       	push	r0
 5ee:	0f b6       	in	r0, 0x3f	; 63
 5f0:	0f 92       	push	r0
 5f2:	11 24       	eor	r1, r1
 5f4:	2f 93       	push	r18
 5f6:	3f 93       	push	r19
 5f8:	4f 93       	push	r20
 5fa:	5f 93       	push	r21
 5fc:	6f 93       	push	r22
 5fe:	7f 93       	push	r23
 600:	8f 93       	push	r24
 602:	9f 93       	push	r25
 604:	af 93       	push	r26
 606:	bf 93       	push	r27
 608:	ef 93       	push	r30
 60a:	ff 93       	push	r31
	static type_state prev_state = RESET;
	uart_puts("");
 60c:	87 e9       	ldi	r24, 0x97	; 151
 60e:	91 e0       	ldi	r25, 0x01	; 1
 610:	0e 94 a0 04 	call	0x940	; 0x940 <uart_puts>
	if(current_state != prev_state)
 614:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <current_state>
 618:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <prev_state.2183>
 61c:	98 17       	cp	r25, r24
 61e:	a1 f1       	breq	.+104    	; 0x688 <__vector_13+0x9e>
   {
	   // Send to uart
	   uart_puts("Current state: ");
 620:	81 e5       	ldi	r24, 0x51	; 81
 622:	91 e0       	ldi	r25, 0x01	; 1
 624:	0e 94 a0 04 	call	0x940	; 0x940 <uart_puts>
	   switch(current_state)
 628:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <current_state>
 62c:	82 30       	cpi	r24, 0x02	; 2
 62e:	a9 f0       	breq	.+42     	; 0x65a <__vector_13+0x70>
 630:	28 f4       	brcc	.+10     	; 0x63c <__vector_13+0x52>
 632:	88 23       	and	r24, r24
 634:	41 f0       	breq	.+16     	; 0x646 <__vector_13+0x5c>
 636:	81 30       	cpi	r24, 0x01	; 1
 638:	59 f0       	breq	.+22     	; 0x650 <__vector_13+0x66>
 63a:	1e c0       	rjmp	.+60     	; 0x678 <__vector_13+0x8e>
 63c:	83 30       	cpi	r24, 0x03	; 3
 63e:	91 f0       	breq	.+36     	; 0x664 <__vector_13+0x7a>
 640:	84 30       	cpi	r24, 0x04	; 4
 642:	a9 f0       	breq	.+42     	; 0x66e <__vector_13+0x84>
 644:	19 c0       	rjmp	.+50     	; 0x678 <__vector_13+0x8e>
	   {
			case RESET:
				uart_puts("RESET");
 646:	81 e6       	ldi	r24, 0x61	; 97
 648:	91 e0       	ldi	r25, 0x01	; 1
 64a:	0e 94 a0 04 	call	0x940	; 0x940 <uart_puts>
				break;
 64e:	18 c0       	rjmp	.+48     	; 0x680 <__vector_13+0x96>
			case GET_CODE:
				uart_puts("GET_CODE");
 650:	87 e6       	ldi	r24, 0x67	; 103
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	0e 94 a0 04 	call	0x940	; 0x940 <uart_puts>
				break;
 658:	13 c0       	rjmp	.+38     	; 0x680 <__vector_13+0x96>
			case CHECK_CODE:
				uart_puts("CHECK_CODE");
 65a:	80 e7       	ldi	r24, 0x70	; 112
 65c:	91 e0       	ldi	r25, 0x01	; 1
 65e:	0e 94 a0 04 	call	0x940	; 0x940 <uart_puts>
				break;
 662:	0e c0       	rjmp	.+28     	; 0x680 <__vector_13+0x96>
			case DOOR_OPEN:
				uart_puts("DOOR_OPEN");
 664:	8b e7       	ldi	r24, 0x7B	; 123
 666:	91 e0       	ldi	r25, 0x01	; 1
 668:	0e 94 a0 04 	call	0x940	; 0x940 <uart_puts>
				break;
 66c:	09 c0       	rjmp	.+18     	; 0x680 <__vector_13+0x96>
			case WRONG_CODE:
				uart_puts("WRONG_CODE");
 66e:	85 e8       	ldi	r24, 0x85	; 133
 670:	91 e0       	ldi	r25, 0x01	; 1
 672:	0e 94 a0 04 	call	0x940	; 0x940 <uart_puts>
				break;
 676:	04 c0       	rjmp	.+8      	; 0x680 <__vector_13+0x96>
			default:
				uart_puts("ERROR");
 678:	80 e9       	ldi	r24, 0x90	; 144
 67a:	91 e0       	ldi	r25, 0x01	; 1
 67c:	0e 94 a0 04 	call	0x940	; 0x940 <uart_puts>
	   }
	   uart_puts("\n");
 680:	86 e9       	ldi	r24, 0x96	; 150
 682:	91 e0       	ldi	r25, 0x01	; 1
 684:	0e 94 a0 04 	call	0x940	; 0x940 <uart_puts>
   }
   
   prev_state = current_state;
 688:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <current_state>
 68c:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <prev_state.2183>
}
 690:	ff 91       	pop	r31
 692:	ef 91       	pop	r30
 694:	bf 91       	pop	r27
 696:	af 91       	pop	r26
 698:	9f 91       	pop	r25
 69a:	8f 91       	pop	r24
 69c:	7f 91       	pop	r23
 69e:	6f 91       	pop	r22
 6a0:	5f 91       	pop	r21
 6a2:	4f 91       	pop	r20
 6a4:	3f 91       	pop	r19
 6a6:	2f 91       	pop	r18
 6a8:	0f 90       	pop	r0
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	0f 90       	pop	r0
 6ae:	1f 90       	pop	r1
 6b0:	18 95       	reti

000006b2 <__vector_9>:

// 4ms / 16ms counter
ISR(TIMER2_OVF_vect)
{
 6b2:	1f 92       	push	r1
 6b4:	0f 92       	push	r0
 6b6:	0f b6       	in	r0, 0x3f	; 63
 6b8:	0f 92       	push	r0
 6ba:	11 24       	eor	r1, r1
 6bc:	2f 93       	push	r18
 6be:	3f 93       	push	r19
 6c0:	4f 93       	push	r20
 6c2:	5f 93       	push	r21
 6c4:	6f 93       	push	r22
 6c6:	7f 93       	push	r23
 6c8:	8f 93       	push	r24
 6ca:	9f 93       	push	r25
 6cc:	af 93       	push	r26
 6ce:	bf 93       	push	r27
 6d0:	ef 93       	push	r30
 6d2:	ff 93       	push	r31
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
 6d8:	00 d0       	rcall	.+0      	; 0x6da <__vector_9+0x28>
 6da:	1f 92       	push	r1
 6dc:	cd b7       	in	r28, 0x3d	; 61
 6de:	de b7       	in	r29, 0x3e	; 62
	char str[] = "  ";
 6e0:	80 e2       	ldi	r24, 0x20	; 32
 6e2:	90 e2       	ldi	r25, 0x20	; 32
 6e4:	9a 83       	std	Y+2, r25	; 0x02
 6e6:	89 83       	std	Y+1, r24	; 0x01
 6e8:	1b 82       	std	Y+3, r1	; 0x03
	static uint8_t wrong_tries = 0;
	static uint32_t count = 0;
	if(count == 0){
 6ea:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <count.2198>
 6ee:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <count.2198+0x1>
 6f2:	a0 91 b7 01 	lds	r26, 0x01B7	; 0x8001b7 <count.2198+0x2>
 6f6:	b0 91 b8 01 	lds	r27, 0x01B8	; 0x8001b8 <count.2198+0x3>
 6fa:	89 2b       	or	r24, r25
 6fc:	8a 2b       	or	r24, r26
 6fe:	8b 2b       	or	r24, r27
 700:	09 f0       	breq	.+2      	; 0x704 <__vector_9+0x52>
 702:	5b c0       	rjmp	.+182    	; 0x7ba <__vector_9+0x108>
		if(current_state == DOOR_OPEN)
 704:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <current_state>
 708:	83 30       	cpi	r24, 0x03	; 3
 70a:	31 f4       	brne	.+12     	; 0x718 <__vector_9+0x66>
			GPIO_toggle(&PORTB, RELAY);
 70c:	63 e0       	ldi	r22, 0x03	; 3
 70e:	85 e2       	ldi	r24, 0x25	; 37
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_toggle>
 716:	51 c0       	rjmp	.+162    	; 0x7ba <__vector_9+0x108>
		else if(current_state == WRONG_CODE)
 718:	84 30       	cpi	r24, 0x04	; 4
 71a:	09 f0       	breq	.+2      	; 0x71e <__vector_9+0x6c>
 71c:	62 c0       	rjmp	.+196    	; 0x7e2 <__vector_9+0x130>
		{
					wrong_tries++;
 71e:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <__data_end>
 722:	8f 5f       	subi	r24, 0xFF	; 255
 724:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <__data_end>
					lcd_clrscr();
 728:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_clrscr>
					lcd_putc(0);
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_putc>
					lcd_gotoxy(15, 0);
 732:	60 e0       	ldi	r22, 0x00	; 0
 734:	8f e0       	ldi	r24, 0x0F	; 15
 736:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_gotoxy>
					lcd_putc(0);
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_putc>
					lcd_gotoxy(0, 1);
 740:	61 e0       	ldi	r22, 0x01	; 1
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_gotoxy>
					lcd_putc(1);
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_putc>
					lcd_gotoxy(15, 1);
 74e:	61 e0       	ldi	r22, 0x01	; 1
 750:	8f e0       	ldi	r24, 0x0F	; 15
 752:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_gotoxy>
					lcd_putc(1);
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_putc>
					lcd_gotoxy(1, 0);
 75c:	60 e0       	ldi	r22, 0x00	; 0
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_gotoxy>
					lcd_puts("ACCESS DENIED");
 764:	88 e9       	ldi	r24, 0x98	; 152
 766:	91 e0       	ldi	r25, 0x01	; 1
 768:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_puts>
					lcd_gotoxy(1, 1);
 76c:	61 e0       	ldi	r22, 0x01	; 1
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_gotoxy>
					lcd_puts("WRONG TRIES:");
 774:	86 ea       	ldi	r24, 0xA6	; 166
 776:	91 e0       	ldi	r25, 0x01	; 1
 778:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_puts>
					lcd_gotoxy(13, 1);
 77c:	61 e0       	ldi	r22, 0x01	; 1
 77e:	8d e0       	ldi	r24, 0x0D	; 13
 780:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_gotoxy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 784:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <__data_end>
 788:	4a e0       	ldi	r20, 0x0A	; 10
 78a:	be 01       	movw	r22, r28
 78c:	6f 5f       	subi	r22, 0xFF	; 255
 78e:	7f 4f       	sbci	r23, 0xFF	; 255
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	0e 94 af 04 	call	0x95e	; 0x95e <__itoa_ncheck>
					itoa(wrong_tries, str, 10);
					lcd_puts(str);
 796:	ce 01       	movw	r24, r28
 798:	01 96       	adiw	r24, 0x01	; 1
 79a:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_puts>
					if(wrong_tries == 100)
 79e:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <__data_end>
 7a2:	84 36       	cpi	r24, 0x64	; 100
 7a4:	19 f4       	brne	.+6      	; 0x7ac <__vector_9+0xfa>
						wrong_tries = 0;
 7a6:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <__data_end>
 7aa:	07 c0       	rjmp	.+14     	; 0x7ba <__vector_9+0x108>
					if(wrong_tries > 4)
 7ac:	85 30       	cpi	r24, 0x05	; 5
 7ae:	28 f0       	brcs	.+10     	; 0x7ba <__vector_9+0x108>
						GPIO_toggle(&PORTB, AUDIO);
 7b0:	62 e0       	ldi	r22, 0x02	; 2
 7b2:	85 e2       	ldi	r24, 0x25	; 37
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_toggle>
		}
	}
	
	if(count == 1250)//1250*16ms=20s //1250*4ms = 5s
 7ba:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <count.2198>
 7be:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <count.2198+0x1>
 7c2:	a0 91 b7 01 	lds	r26, 0x01B7	; 0x8001b7 <count.2198+0x2>
 7c6:	b0 91 b8 01 	lds	r27, 0x01B8	; 0x8001b8 <count.2198+0x3>
 7ca:	82 3e       	cpi	r24, 0xE2	; 226
 7cc:	94 40       	sbci	r25, 0x04	; 4
 7ce:	a1 05       	cpc	r26, r1
 7d0:	b1 05       	cpc	r27, r1
 7d2:	39 f4       	brne	.+14     	; 0x7e2 <__vector_9+0x130>
	{
		current_state = RESET;
 7d4:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <current_state>
		if(current_state == DOOR_OPEN)
			GPIO_toggle(&PORTB, RELAY);
		else if(current_state == WRONG_CODE && wrong_tries > 4)
			GPIO_toggle(&PORTB, AUDIO);		
		TIM2_overflow_interrupt_disable();
 7d8:	e0 e7       	ldi	r30, 0x70	; 112
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	80 81       	ld	r24, Z
 7de:	8e 7f       	andi	r24, 0xFE	; 254
 7e0:	80 83       	st	Z, r24
	}
	count++;
 7e2:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <count.2198>
 7e6:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <count.2198+0x1>
 7ea:	a0 91 b7 01 	lds	r26, 0x01B7	; 0x8001b7 <count.2198+0x2>
 7ee:	b0 91 b8 01 	lds	r27, 0x01B8	; 0x8001b8 <count.2198+0x3>
 7f2:	01 96       	adiw	r24, 0x01	; 1
 7f4:	a1 1d       	adc	r26, r1
 7f6:	b1 1d       	adc	r27, r1
 7f8:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <count.2198>
 7fc:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <count.2198+0x1>
 800:	a0 93 b7 01 	sts	0x01B7, r26	; 0x8001b7 <count.2198+0x2>
 804:	b0 93 b8 01 	sts	0x01B8, r27	; 0x8001b8 <count.2198+0x3>

 808:	0f 90       	pop	r0
 80a:	0f 90       	pop	r0
 80c:	0f 90       	pop	r0
 80e:	df 91       	pop	r29
 810:	cf 91       	pop	r28
 812:	ff 91       	pop	r31
 814:	ef 91       	pop	r30
 816:	bf 91       	pop	r27
 818:	af 91       	pop	r26
 81a:	9f 91       	pop	r25
 81c:	8f 91       	pop	r24
 81e:	7f 91       	pop	r23
 820:	6f 91       	pop	r22
 822:	5f 91       	pop	r21
 824:	4f 91       	pop	r20
 826:	3f 91       	pop	r19
 828:	2f 91       	pop	r18
 82a:	0f 90       	pop	r0
 82c:	0f be       	out	0x3f, r0	; 63
 82e:	0f 90       	pop	r0
 830:	1f 90       	pop	r1
 832:	18 95       	reti

00000834 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 834:	1f 92       	push	r1
 836:	0f 92       	push	r0
 838:	0f b6       	in	r0, 0x3f	; 63
 83a:	0f 92       	push	r0
 83c:	11 24       	eor	r1, r1
 83e:	2f 93       	push	r18
 840:	8f 93       	push	r24
 842:	9f 93       	push	r25
 844:	ef 93       	push	r30
 846:	ff 93       	push	r31
 848:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 84c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 850:	8c 71       	andi	r24, 0x1C	; 28
 852:	e0 91 bd 01 	lds	r30, 0x01BD	; 0x8001bd <UART_RxHead>
 856:	ef 5f       	subi	r30, 0xFF	; 255
 858:	ef 71       	andi	r30, 0x1F	; 31
 85a:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <UART_RxTail>
 85e:	e9 17       	cp	r30, r25
 860:	39 f0       	breq	.+14     	; 0x870 <__vector_18+0x3c>
 862:	e0 93 bd 01 	sts	0x01BD, r30	; 0x8001bd <UART_RxHead>
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	e0 54       	subi	r30, 0x40	; 64
 86a:	fe 4f       	sbci	r31, 0xFE	; 254
 86c:	20 83       	st	Z, r18
 86e:	01 c0       	rjmp	.+2      	; 0x872 <__vector_18+0x3e>
 870:	82 e0       	ldi	r24, 0x02	; 2
 872:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <UART_LastRxError>
 876:	89 2b       	or	r24, r25
 878:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <UART_LastRxError>
 87c:	ff 91       	pop	r31
 87e:	ef 91       	pop	r30
 880:	9f 91       	pop	r25
 882:	8f 91       	pop	r24
 884:	2f 91       	pop	r18
 886:	0f 90       	pop	r0
 888:	0f be       	out	0x3f, r0	; 63
 88a:	0f 90       	pop	r0
 88c:	1f 90       	pop	r1
 88e:	18 95       	reti

00000890 <__vector_19>:
 890:	1f 92       	push	r1
 892:	0f 92       	push	r0
 894:	0f b6       	in	r0, 0x3f	; 63
 896:	0f 92       	push	r0
 898:	11 24       	eor	r1, r1
 89a:	8f 93       	push	r24
 89c:	9f 93       	push	r25
 89e:	ef 93       	push	r30
 8a0:	ff 93       	push	r31
 8a2:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <UART_TxHead>
 8a6:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <UART_TxTail>
 8aa:	98 17       	cp	r25, r24
 8ac:	69 f0       	breq	.+26     	; 0x8c8 <__vector_19+0x38>
 8ae:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <UART_TxTail>
 8b2:	ef 5f       	subi	r30, 0xFF	; 255
 8b4:	ef 71       	andi	r30, 0x1F	; 31
 8b6:	e0 93 be 01 	sts	0x01BE, r30	; 0x8001be <UART_TxTail>
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	e0 52       	subi	r30, 0x20	; 32
 8be:	fe 4f       	sbci	r31, 0xFE	; 254
 8c0:	80 81       	ld	r24, Z
 8c2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <__vector_19+0x42>
 8c8:	e1 ec       	ldi	r30, 0xC1	; 193
 8ca:	f0 e0       	ldi	r31, 0x00	; 0
 8cc:	80 81       	ld	r24, Z
 8ce:	8f 7d       	andi	r24, 0xDF	; 223
 8d0:	80 83       	st	Z, r24
 8d2:	ff 91       	pop	r31
 8d4:	ef 91       	pop	r30
 8d6:	9f 91       	pop	r25
 8d8:	8f 91       	pop	r24
 8da:	0f 90       	pop	r0
 8dc:	0f be       	out	0x3f, r0	; 63
 8de:	0f 90       	pop	r0
 8e0:	1f 90       	pop	r1
 8e2:	18 95       	reti

000008e4 <uart_init>:
 8e4:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <UART_TxHead>
 8e8:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <UART_TxTail>
 8ec:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <UART_RxHead>
 8f0:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <UART_RxTail>
 8f4:	99 23       	and	r25, r25
 8f6:	1c f4       	brge	.+6      	; 0x8fe <uart_init+0x1a>
 8f8:	22 e0       	ldi	r18, 0x02	; 2
 8fa:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 8fe:	90 78       	andi	r25, 0x80	; 128
 900:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 904:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 908:	88 e9       	ldi	r24, 0x98	; 152
 90a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 90e:	86 e0       	ldi	r24, 0x06	; 6
 910:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 914:	08 95       	ret

00000916 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 916:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <UART_TxHead>
 91a:	2f 5f       	subi	r18, 0xFF	; 255
 91c:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 91e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <UART_TxTail>
 922:	29 17       	cp	r18, r25
 924:	e1 f3       	breq	.-8      	; 0x91e <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 926:	e2 2f       	mov	r30, r18
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	e0 52       	subi	r30, 0x20	; 32
 92c:	fe 4f       	sbci	r31, 0xFE	; 254
 92e:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 930:	20 93 bf 01 	sts	0x01BF, r18	; 0x8001bf <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 934:	e1 ec       	ldi	r30, 0xC1	; 193
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	80 81       	ld	r24, Z
 93a:	80 62       	ori	r24, 0x20	; 32
 93c:	80 83       	st	Z, r24
 93e:	08 95       	ret

00000940 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 940:	cf 93       	push	r28
 942:	df 93       	push	r29
 944:	ec 01       	movw	r28, r24
    while (*s)
 946:	88 81       	ld	r24, Y
 948:	88 23       	and	r24, r24
 94a:	31 f0       	breq	.+12     	; 0x958 <uart_puts+0x18>
 94c:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 94e:	0e 94 8b 04 	call	0x916	; 0x916 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 952:	89 91       	ld	r24, Y+
 954:	81 11       	cpse	r24, r1
 956:	fb cf       	rjmp	.-10     	; 0x94e <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 958:	df 91       	pop	r29
 95a:	cf 91       	pop	r28
 95c:	08 95       	ret

0000095e <__itoa_ncheck>:
 95e:	bb 27       	eor	r27, r27
 960:	4a 30       	cpi	r20, 0x0A	; 10
 962:	31 f4       	brne	.+12     	; 0x970 <__itoa_ncheck+0x12>
 964:	99 23       	and	r25, r25
 966:	22 f4       	brpl	.+8      	; 0x970 <__itoa_ncheck+0x12>
 968:	bd e2       	ldi	r27, 0x2D	; 45
 96a:	90 95       	com	r25
 96c:	81 95       	neg	r24
 96e:	9f 4f       	sbci	r25, 0xFF	; 255
 970:	0c 94 bb 04 	jmp	0x976	; 0x976 <__utoa_common>

00000974 <__utoa_ncheck>:
 974:	bb 27       	eor	r27, r27

00000976 <__utoa_common>:
 976:	fb 01       	movw	r30, r22
 978:	55 27       	eor	r21, r21
 97a:	aa 27       	eor	r26, r26
 97c:	88 0f       	add	r24, r24
 97e:	99 1f       	adc	r25, r25
 980:	aa 1f       	adc	r26, r26
 982:	a4 17       	cp	r26, r20
 984:	10 f0       	brcs	.+4      	; 0x98a <__utoa_common+0x14>
 986:	a4 1b       	sub	r26, r20
 988:	83 95       	inc	r24
 98a:	50 51       	subi	r21, 0x10	; 16
 98c:	b9 f7       	brne	.-18     	; 0x97c <__utoa_common+0x6>
 98e:	a0 5d       	subi	r26, 0xD0	; 208
 990:	aa 33       	cpi	r26, 0x3A	; 58
 992:	08 f0       	brcs	.+2      	; 0x996 <__utoa_common+0x20>
 994:	a9 5d       	subi	r26, 0xD9	; 217
 996:	a1 93       	st	Z+, r26
 998:	00 97       	sbiw	r24, 0x00	; 0
 99a:	79 f7       	brne	.-34     	; 0x97a <__utoa_common+0x4>
 99c:	b1 11       	cpse	r27, r1
 99e:	b1 93       	st	Z+, r27
 9a0:	11 92       	st	Z+, r1
 9a2:	cb 01       	movw	r24, r22
 9a4:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <strrev>

000009a8 <strrev>:
 9a8:	dc 01       	movw	r26, r24
 9aa:	fc 01       	movw	r30, r24
 9ac:	67 2f       	mov	r22, r23
 9ae:	71 91       	ld	r23, Z+
 9b0:	77 23       	and	r23, r23
 9b2:	e1 f7       	brne	.-8      	; 0x9ac <strrev+0x4>
 9b4:	32 97       	sbiw	r30, 0x02	; 2
 9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <strrev+0x18>
 9b8:	7c 91       	ld	r23, X
 9ba:	6d 93       	st	X+, r22
 9bc:	70 83       	st	Z, r23
 9be:	62 91       	ld	r22, -Z
 9c0:	ae 17       	cp	r26, r30
 9c2:	bf 07       	cpc	r27, r31
 9c4:	c8 f3       	brcs	.-14     	; 0x9b8 <strrev+0x10>
 9c6:	08 95       	ret

000009c8 <_exit>:
 9c8:	f8 94       	cli

000009ca <__stop_program>:
 9ca:	ff cf       	rjmp	.-2      	; 0x9ca <__stop_program>
