
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  000008a0  00000934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  00800198  00800198  000009cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a1f  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf1  00000000  00000000  000025db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e97  00000000  00000000  000031cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000042c  00000000  00000000  00004064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000691  00000000  00000000  00004490  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010aa  00000000  00000000  00004b21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00005bcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 0a 03 	jmp	0x614	; 0x614 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b9 03 	jmp	0x772	; 0x772 <__vector_18>
  4c:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 39       	cpi	r26, 0x98	; 152
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e9       	ldi	r26, 0x98	; 152
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 3e       	cpi	r26, 0xE3	; 227
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c3 02 	call	0x586	; 0x586 <main>
  9e:	0c 94 4e 04 	jmp	0x89c	; 0x89c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_read>:
/* GPIO_read */
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	// kdyz je dany bit na dane adrese 0
	// tak se vrati 0 jinak 1
	if(bit_is_clear(*reg_name, pin_num))
  a6:	fc 01       	movw	r30, r24
  a8:	80 81       	ld	r24, Z
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <GPIO_read+0xc>
  ae:	95 95       	asr	r25
  b0:	87 95       	ror	r24
  b2:	6a 95       	dec	r22
  b4:	e2 f7       	brpl	.-8      	; 0xae <GPIO_read+0x8>
		return 0;
	else
		return 1;
  b6:	81 70       	andi	r24, 0x01	; 1
  b8:	08 95       	ret

000000ba <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  ba:	29 9a       	sbi	0x05, 1	; 5
  bc:	85 e0       	ldi	r24, 0x05	; 5
  be:	8a 95       	dec	r24
  c0:	f1 f7       	brne	.-4      	; 0xbe <toggle_e+0x4>
  c2:	00 00       	nop
  c4:	29 98       	cbi	0x05, 1	; 5
  c6:	08 95       	ret

000000c8 <lcd_write>:
  c8:	cf 93       	push	r28
  ca:	c8 2f       	mov	r28, r24
  cc:	66 23       	and	r22, r22
  ce:	11 f0       	breq	.+4      	; 0xd4 <lcd_write+0xc>
  d0:	28 9a       	sbi	0x05, 0	; 5
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <lcd_write+0xe>
  d4:	28 98       	cbi	0x05, 0	; 5
  d6:	54 9a       	sbi	0x0a, 4	; 10
  d8:	55 9a       	sbi	0x0a, 5	; 10
  da:	56 9a       	sbi	0x0a, 6	; 10
  dc:	57 9a       	sbi	0x0a, 7	; 10
  de:	5f 98       	cbi	0x0b, 7	; 11
  e0:	5e 98       	cbi	0x0b, 6	; 11
  e2:	5d 98       	cbi	0x0b, 5	; 11
  e4:	5c 98       	cbi	0x0b, 4	; 11
  e6:	cc 23       	and	r28, r28
  e8:	0c f4       	brge	.+2      	; 0xec <lcd_write+0x24>
  ea:	5f 9a       	sbi	0x0b, 7	; 11
  ec:	c6 fd       	sbrc	r28, 6
  ee:	5e 9a       	sbi	0x0b, 6	; 11
  f0:	c5 fd       	sbrc	r28, 5
  f2:	5d 9a       	sbi	0x0b, 5	; 11
  f4:	c4 fd       	sbrc	r28, 4
  f6:	5c 9a       	sbi	0x0b, 4	; 11
  f8:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
  fc:	5f 98       	cbi	0x0b, 7	; 11
  fe:	5e 98       	cbi	0x0b, 6	; 11
 100:	5d 98       	cbi	0x0b, 5	; 11
 102:	5c 98       	cbi	0x0b, 4	; 11
 104:	c3 fd       	sbrc	r28, 3
 106:	5f 9a       	sbi	0x0b, 7	; 11
 108:	c2 fd       	sbrc	r28, 2
 10a:	5e 9a       	sbi	0x0b, 6	; 11
 10c:	c1 fd       	sbrc	r28, 1
 10e:	5d 9a       	sbi	0x0b, 5	; 11
 110:	c0 fd       	sbrc	r28, 0
 112:	5c 9a       	sbi	0x0b, 4	; 11
 114:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
 118:	5c 9a       	sbi	0x0b, 4	; 11
 11a:	5d 9a       	sbi	0x0b, 5	; 11
 11c:	5e 9a       	sbi	0x0b, 6	; 11
 11e:	5f 9a       	sbi	0x0b, 7	; 11
 120:	87 eb       	ldi	r24, 0xB7	; 183
 122:	9b e0       	ldi	r25, 0x0B	; 11
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_write+0x5c>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_write+0x62>
 12a:	00 00       	nop
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <lcd_command>:
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_write>
 136:	08 95       	ret

00000138 <lcd_data>:
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_write>
 13e:	08 95       	ret

00000140 <lcd_gotoxy>:
 140:	61 11       	cpse	r22, r1
 142:	04 c0       	rjmp	.+8      	; 0x14c <lcd_gotoxy+0xc>
 144:	80 58       	subi	r24, 0x80	; 128
 146:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
 14a:	08 95       	ret
 14c:	80 54       	subi	r24, 0x40	; 64
 14e:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
 152:	08 95       	ret

00000154 <lcd_clrscr>:
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
 15a:	08 95       	ret

0000015c <lcd_putc>:
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_write>
 162:	08 95       	ret

00000164 <lcd_puts>:
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ec 01       	movw	r28, r24
 16a:	21 96       	adiw	r28, 0x01	; 1
 16c:	fc 01       	movw	r30, r24
 16e:	80 81       	ld	r24, Z
 170:	88 23       	and	r24, r24
 172:	29 f0       	breq	.+10     	; 0x17e <lcd_puts+0x1a>
 174:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_putc>
 178:	89 91       	ld	r24, Y+
 17a:	81 11       	cpse	r24, r1
 17c:	fb cf       	rjmp	.-10     	; 0x174 <lcd_puts+0x10>
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 184:	cf 93       	push	r28
 186:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 188:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 18a:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 18c:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 18e:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 190:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 192:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 194:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	99 ef       	ldi	r25, 0xF9	; 249
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x16>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x1c>
 1a0:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 1a2:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 1a4:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 1a6:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
 1aa:	8f e1       	ldi	r24, 0x1F	; 31
 1ac:	9e e4       	ldi	r25, 0x4E	; 78
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_init+0x2a>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcd_init+0x30>
 1b4:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1b6:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_init+0x3a>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <lcd_init+0x40>
 1c4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1c6:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_init+0x4a>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <lcd_init+0x50>
 1d4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1d6:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1d8:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_init+0x5c>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_init+0x62>
 1e6:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1e8:	88 e2       	ldi	r24, 0x28	; 40
 1ea:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1ee:	88 e0       	ldi	r24, 0x08	; 8
 1f0:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1f4:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1fe:	8c 2f       	mov	r24, r28
 200:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
}/* lcd_init */
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <reset>:
type_state current_state = RESET;
uint32_t counter2 = 0;


void reset(void)
{
 208:	0f 93       	push	r16
 20a:	1f 93       	push	r17
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
	
	
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 210:	80 e4       	ldi	r24, 0x40	; 64
 212:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>
 216:	c4 e0       	ldi	r28, 0x04	; 4
 218:	d1 e0       	ldi	r29, 0x01	; 1
 21a:	04 e1       	ldi	r16, 0x14	; 20
 21c:	11 e0       	ldi	r17, 0x01	; 1
	for (uint8_t i = 0; i < 8*2; i++) //0,1,2,3 ,4,5,6,7
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 21e:	89 91       	ld	r24, Y+
 220:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>
{
	
	
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 8*2; i++) //0,1,2,3 ,4,5,6,7
 224:	c0 17       	cp	r28, r16
 226:	d1 07       	cpc	r29, r17
 228:	d1 f7       	brne	.-12     	; 0x21e <reset+0x16>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 22a:	80 e8       	ldi	r24, 0x80	; 128
 22c:	0e 94 98 00 	call	0x130	; 0x130 <lcd_command>

	// Initialize LCD display
	lcd_clrscr();
 230:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_clrscr>
	// Display custom characters
	lcd_putc(0);
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_putc>
	lcd_gotoxy(15, 0);
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	8f e0       	ldi	r24, 0x0F	; 15
 23e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_gotoxy>
	lcd_putc(0);
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_putc>
	lcd_gotoxy(0, 1);
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_gotoxy>
	lcd_putc(1);
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_putc>
	lcd_gotoxy(15, 1);
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	8f e0       	ldi	r24, 0x0F	; 15
 25a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_gotoxy>
	lcd_putc(1);
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_putc>
	
	//lcd_gotoxy(1, 1);
	//lcd_puts("Welcome Bachhh");
	

	lcd_gotoxy(1, 0);
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_gotoxy>
	lcd_puts("Password:____");
 26c:	84 e1       	ldi	r24, 0x14	; 20
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_puts>
	//_delay_ms(2000);
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	08 95       	ret

0000027e <getkey>:

uint8_t getkey()
{
 27e:	cf 92       	push	r12
 280:	df 92       	push	r13
 282:	ef 92       	push	r14
 284:	ff 92       	push	r15
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
	uint8_t row, col;
	DDRC&=~(0x7F);
 28e:	87 b1       	in	r24, 0x07	; 7
 290:	80 78       	andi	r24, 0x80	; 128
 292:	87 b9       	out	0x07, r24	; 7
	PORTC|=0x0F;
 294:	88 b1       	in	r24, 0x08	; 8
 296:	8f 60       	ori	r24, 0x0F	; 15
 298:	88 b9       	out	0x08, r24	; 8
 29a:	00 e0       	ldi	r16, 0x00	; 0
 29c:	10 e0       	ldi	r17, 0x00	; 0
	for(col=0;col<3;col++)
	{
		DDRC|=(0x10<<col);
 29e:	68 94       	set
 2a0:	cc 24       	eor	r12, r12
 2a2:	c4 f8       	bld	r12, 4
 2a4:	d1 2c       	mov	r13, r1
 2a6:	d0 2f       	mov	r29, r16
 2a8:	97 b1       	in	r25, 0x07	; 7
 2aa:	76 01       	movw	r14, r12
 2ac:	00 2e       	mov	r0, r16
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <getkey+0x36>
 2b0:	ee 0c       	add	r14, r14
 2b2:	ff 1c       	adc	r15, r15
 2b4:	0a 94       	dec	r0
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <getkey+0x32>
 2b8:	9e 29       	or	r25, r14
 2ba:	97 b9       	out	0x07, r25	; 7
		if(!GPIO_read(&PINC, 0))
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	86 e2       	ldi	r24, 0x26	; 38
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_read>
 2c6:	88 23       	and	r24, r24
 2c8:	e9 f0       	breq	.+58     	; 0x304 <getkey+0x86>
 2ca:	c0 e0       	ldi	r28, 0x00	; 0
			return(-1);
		for(row=0;row<4;row++)
			if(!GPIO_read(&PINC, row))
 2cc:	6c 2f       	mov	r22, r28
 2ce:	86 e2       	ldi	r24, 0x26	; 38
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_read>
 2d6:	81 11       	cpse	r24, r1
 2d8:	07 c0       	rjmp	.+14     	; 0x2e8 <getkey+0x6a>
				return(row*3+col+1);
 2da:	8c 2f       	mov	r24, r28
 2dc:	88 0f       	add	r24, r24
 2de:	c8 0f       	add	r28, r24
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	8d 0f       	add	r24, r29
 2e4:	8c 0f       	add	r24, r28
 2e6:	0f c0       	rjmp	.+30     	; 0x306 <getkey+0x88>
	for(col=0;col<3;col++)
	{
		DDRC|=(0x10<<col);
		if(!GPIO_read(&PINC, 0))
			return(-1);
		for(row=0;row<4;row++)
 2e8:	cf 5f       	subi	r28, 0xFF	; 255
 2ea:	c4 30       	cpi	r28, 0x04	; 4
 2ec:	79 f7       	brne	.-34     	; 0x2cc <getkey+0x4e>
			if(!GPIO_read(&PINC, row))
				return(row*3+col+1);
		DDRC&=~(0x10<<col);
 2ee:	87 b1       	in	r24, 0x07	; 7
 2f0:	e0 94       	com	r14
 2f2:	e8 22       	and	r14, r24
 2f4:	e7 b8       	out	0x07, r14	; 7
 2f6:	0f 5f       	subi	r16, 0xFF	; 255
 2f8:	1f 4f       	sbci	r17, 0xFF	; 255
uint8_t getkey()
{
	uint8_t row, col;
	DDRC&=~(0x7F);
	PORTC|=0x0F;
	for(col=0;col<3;col++)
 2fa:	03 30       	cpi	r16, 0x03	; 3
 2fc:	11 05       	cpc	r17, r1
 2fe:	99 f6       	brne	.-90     	; 0x2a6 <getkey+0x28>
		for(row=0;row<4;row++)
			if(!GPIO_read(&PINC, row))
				return(row*3+col+1);
		DDRC&=~(0x10<<col);
	}
	return 0;//Indicate No key pressed
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	01 c0       	rjmp	.+2      	; 0x306 <getkey+0x88>
	PORTC|=0x0F;
	for(col=0;col<3;col++)
	{
		DDRC|=(0x10<<col);
		if(!GPIO_read(&PINC, 0))
			return(-1);
 304:	8f ef       	ldi	r24, 0xFF	; 255
			if(!GPIO_read(&PINC, row))
				return(row*3+col+1);
		DDRC&=~(0x10<<col);
	}
	return 0;//Indicate No key pressed
}
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	ff 90       	pop	r15
 310:	ef 90       	pop	r14
 312:	df 90       	pop	r13
 314:	cf 90       	pop	r12
 316:	08 95       	ret

00000318 <get_code>:

void get_code(uint8_t* code)
{
 318:	0f 93       	push	r16
 31a:	1f 93       	push	r17
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	00 d0       	rcall	.+0      	; 0x322 <get_code+0xa>
 322:	00 d0       	rcall	.+0      	; 0x324 <get_code+0xc>
 324:	1f 92       	push	r1
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	8c 01       	movw	r16, r24
	if(code[0] != 10)
 32c:	fc 01       	movw	r30, r24
 32e:	80 81       	ld	r24, Z
 330:	8a 30       	cpi	r24, 0x0A	; 10
 332:	51 f0       	breq	.+20     	; 0x348 <get_code+0x30>
	{		
		TIM2_overflow_16ms()
 334:	e1 eb       	ldi	r30, 0xB1	; 177
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	87 60       	ori	r24, 0x07	; 7
 33c:	80 83       	st	Z, r24
		TIM2_overflow_interrupt_enable();	
 33e:	e0 e7       	ldi	r30, 0x70	; 112
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	81 60       	ori	r24, 0x01	; 1
 346:	80 83       	st	Z, r24
	}
	
	uint8_t key = getkey();
 348:	0e 94 3f 01 	call	0x27e	; 0x27e <getkey>
	if (key!=0)
 34c:	88 23       	and	r24, r24
 34e:	09 f4       	brne	.+2      	; 0x352 <get_code+0x3a>
 350:	4b c0       	rjmp	.+150    	; 0x3e8 <get_code+0xd0>
	{
		switch(key)
 352:	8a 30       	cpi	r24, 0x0A	; 10
 354:	19 f0       	breq	.+6      	; 0x35c <get_code+0x44>
 356:	8c 30       	cpi	r24, 0x0C	; 12
 358:	61 f0       	breq	.+24     	; 0x372 <get_code+0x5a>
 35a:	06 c0       	rjmp	.+12     	; 0x368 <get_code+0x50>
				TIM2_overflow_interrupt_disable();
				current_state = CHECK_CODE; //ma se provest kontrola hesla a pripadne dalsi zmeny
				break;
			case 10:
				for(uint8_t i=3;i>=0;i--)
					if(code[i]!=10)
 35c:	f8 01       	movw	r30, r16
 35e:	83 81       	ldd	r24, Z+3	; 0x03
 360:	8a 30       	cpi	r24, 0x0A	; 10
 362:	81 f4       	brne	.+32     	; 0x384 <get_code+0x6c>
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	1c c0       	rjmp	.+56     	; 0x3a0 <get_code+0x88>
					}
				_delay_ms(250);
					break;
			default:
				for(uint8_t j=0;j<4;j++)
					if(code[j]==10)
 368:	f8 01       	movw	r30, r16
 36a:	90 81       	ld	r25, Z
 36c:	9a 30       	cpi	r25, 0x0A	; 10
 36e:	01 f5       	brne	.+64     	; 0x3b0 <get_code+0x98>
 370:	2c c0       	rjmp	.+88     	; 0x3ca <get_code+0xb2>
	if (key!=0)
	{
		switch(key)
		{
			case 12:
				TIM2_overflow_interrupt_disable();
 372:	e0 e7       	ldi	r30, 0x70	; 112
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	8e 7f       	andi	r24, 0xFE	; 254
 37a:	80 83       	st	Z, r24
				current_state = CHECK_CODE; //ma se provest kontrola hesla a pripadne dalsi zmeny
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <current_state>
				break;
 382:	32 c0       	rjmp	.+100    	; 0x3e8 <get_code+0xd0>
			case 10:
				for(uint8_t i=3;i>=0;i--)
					if(code[i]!=10)
 384:	f8 01       	movw	r30, r16
 386:	33 96       	adiw	r30, 0x03	; 3
					{
						code[i]=10;
 388:	8a e0       	ldi	r24, 0x0A	; 10
 38a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38c:	ff ef       	ldi	r31, 0xFF	; 255
 38e:	24 e3       	ldi	r18, 0x34	; 52
 390:	8c e0       	ldi	r24, 0x0C	; 12
 392:	f1 50       	subi	r31, 0x01	; 1
 394:	20 40       	sbci	r18, 0x00	; 0
 396:	80 40       	sbci	r24, 0x00	; 0
 398:	e1 f7       	brne	.-8      	; 0x392 <get_code+0x7a>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <get_code+0x84>
 39c:	00 00       	nop
 39e:	24 c0       	rjmp	.+72     	; 0x3e8 <get_code+0xd0>
			case 12:
				TIM2_overflow_interrupt_disable();
				current_state = CHECK_CODE; //ma se provest kontrola hesla a pripadne dalsi zmeny
				break;
			case 10:
				for(uint8_t i=3;i>=0;i--)
 3a0:	81 50       	subi	r24, 0x01	; 1
					if(code[i]!=10)
 3a2:	f8 01       	movw	r30, r16
 3a4:	e8 0f       	add	r30, r24
 3a6:	f1 1d       	adc	r31, r1
 3a8:	90 81       	ld	r25, Z
 3aa:	9a 30       	cpi	r25, 0x0A	; 10
 3ac:	c9 f3       	breq	.-14     	; 0x3a0 <get_code+0x88>
 3ae:	ec cf       	rjmp	.-40     	; 0x388 <get_code+0x70>
 3b0:	98 01       	movw	r18, r16
 3b2:	2f 5f       	subi	r18, 0xFF	; 255
 3b4:	3f 4f       	sbci	r19, 0xFF	; 255
 3b6:	a8 01       	movw	r20, r16
 3b8:	4c 5f       	subi	r20, 0xFC	; 252
 3ba:	5f 4f       	sbci	r21, 0xFF	; 255
					}
				_delay_ms(250);
					break;
			default:
				for(uint8_t j=0;j<4;j++)
					if(code[j]==10)
 3bc:	f9 01       	movw	r30, r18
 3be:	2f 5f       	subi	r18, 0xFF	; 255
 3c0:	3f 4f       	sbci	r19, 0xFF	; 255
 3c2:	90 81       	ld	r25, Z
 3c4:	9a 30       	cpi	r25, 0x0A	; 10
 3c6:	21 f4       	brne	.+8      	; 0x3d0 <get_code+0xb8>
 3c8:	01 c0       	rjmp	.+2      	; 0x3cc <get_code+0xb4>
 3ca:	f8 01       	movw	r30, r16
					{
						code[j]=key;
 3cc:	80 83       	st	Z, r24
						break;
 3ce:	03 c0       	rjmp	.+6      	; 0x3d6 <get_code+0xbe>
						break;
					}
				_delay_ms(250);
					break;
			default:
				for(uint8_t j=0;j<4;j++)
 3d0:	42 17       	cp	r20, r18
 3d2:	53 07       	cpc	r21, r19
 3d4:	99 f7       	brne	.-26     	; 0x3bc <get_code+0xa4>
 3d6:	9f ef       	ldi	r25, 0xFF	; 255
 3d8:	e4 e3       	ldi	r30, 0x34	; 52
 3da:	fc e0       	ldi	r31, 0x0C	; 12
 3dc:	91 50       	subi	r25, 0x01	; 1
 3de:	e0 40       	sbci	r30, 0x00	; 0
 3e0:	f0 40       	sbci	r31, 0x00	; 0
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <get_code+0xc4>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <get_code+0xce>
 3e6:	00 00       	nop
				_delay_ms(250);
		} //pokud nedochazi ke kontrole hesla, je treba vlozit malou pauzu (cca 0,5s), aby nedochazelo k duplikaci stisknuteho tlacitka
	}
	
	
	if(code[0] == 10)
 3e8:	f8 01       	movw	r30, r16
 3ea:	80 81       	ld	r24, Z
 3ec:	8a 30       	cpi	r24, 0x0A	; 10
 3ee:	69 f4       	brne	.+26     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	{
		TIM2_overflow_interrupt_disable();
 3f0:	e0 e7       	ldi	r30, 0x70	; 112
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	80 81       	ld	r24, Z
 3f6:	8e 7f       	andi	r24, 0xFE	; 254
 3f8:	80 83       	st	Z, r24
		counter2 = 0;
 3fa:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <counter2>
 3fe:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <counter2+0x1>
 402:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <counter2+0x2>
 406:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <counter2+0x3>
	}	
	
	
	char password[] = "    ";
 40a:	85 e0       	ldi	r24, 0x05	; 5
 40c:	e2 e2       	ldi	r30, 0x22	; 34
 40e:	f1 e0       	ldi	r31, 0x01	; 1
 410:	de 01       	movw	r26, r28
 412:	11 96       	adiw	r26, 0x01	; 1
 414:	01 90       	ld	r0, Z+
 416:	0d 92       	st	X+, r0
 418:	8a 95       	dec	r24
 41a:	e1 f7       	brne	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
    lcd_gotoxy(10, 0);
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	8a e0       	ldi	r24, 0x0A	; 10
 420:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_gotoxy>
 424:	d8 01       	movw	r26, r16
 426:	fe 01       	movw	r30, r28
 428:	31 96       	adiw	r30, 0x01	; 1
 42a:	9e 01       	movw	r18, r28
 42c:	2b 5f       	subi	r18, 0xFB	; 251
 42e:	3f 4f       	sbci	r19, 0xFF	; 255
    for(uint8_t i = 0; i < 4; i++){
        password[i] = (code[i] == 10)? '_': '*';
 430:	8d 91       	ld	r24, X+
 432:	8a 30       	cpi	r24, 0x0A	; 10
 434:	11 f0       	breq	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 436:	8a e2       	ldi	r24, 0x2A	; 42
 438:	01 c0       	rjmp	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 43a:	8f e5       	ldi	r24, 0x5F	; 95
 43c:	81 93       	st	Z+, r24
	}	
	
	
	char password[] = "    ";
    lcd_gotoxy(10, 0);
    for(uint8_t i = 0; i < 4; i++){
 43e:	e2 17       	cp	r30, r18
 440:	f3 07       	cpc	r31, r19
 442:	b1 f7       	brne	.-20     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
        password[i] = (code[i] == 10)? '_': '*';
    }
    lcd_puts(password);   
 444:	ce 01       	movw	r24, r28
 446:	01 96       	adiw	r24, 0x01	; 1
 448:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_puts>
}
 44c:	0f 90       	pop	r0
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	0f 90       	pop	r0
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	1f 91       	pop	r17
 45c:	0f 91       	pop	r16
 45e:	08 95       	ret

00000460 <check_code>:

bool check_code(uint8_t* code)
{
 460:	fc 01       	movw	r30, r24
	//codes are 4242, 0123, 9876
	if((code[0]==4)&&(code[1]==2)&&(code[2]==4)&&(code[3]==2))
 462:	80 81       	ld	r24, Z
 464:	84 30       	cpi	r24, 0x04	; 4
 466:	99 f4       	brne	.+38     	; 0x48e <check_code+0x2e>
 468:	81 81       	ldd	r24, Z+1	; 0x01
 46a:	82 30       	cpi	r24, 0x02	; 2
 46c:	d1 f5       	brne	.+116    	; 0x4e2 <check_code+0x82>
 46e:	82 81       	ldd	r24, Z+2	; 0x02
 470:	84 30       	cpi	r24, 0x04	; 4
 472:	c9 f5       	brne	.+114    	; 0x4e6 <check_code+0x86>
 474:	83 81       	ldd	r24, Z+3	; 0x03
 476:	82 30       	cpi	r24, 0x02	; 2
 478:	c1 f5       	brne	.+112    	; 0x4ea <check_code+0x8a>
	{
		lcd_gotoxy(1, 1);
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_gotoxy>
		lcd_puts("Welcome User1");
 482:	87 e2       	ldi	r24, 0x27	; 39
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_puts>
		return 1;
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	08 95       	ret
	}
	else if((code[0]==11)&&(code[1]==1)&&(code[2]==2)&&(code[3]==3))
 48e:	8b 30       	cpi	r24, 0x0B	; 11
 490:	99 f4       	brne	.+38     	; 0x4b8 <check_code+0x58>
 492:	81 81       	ldd	r24, Z+1	; 0x01
 494:	81 30       	cpi	r24, 0x01	; 1
 496:	59 f5       	brne	.+86     	; 0x4ee <check_code+0x8e>
 498:	82 81       	ldd	r24, Z+2	; 0x02
 49a:	82 30       	cpi	r24, 0x02	; 2
 49c:	51 f5       	brne	.+84     	; 0x4f2 <check_code+0x92>
 49e:	83 81       	ldd	r24, Z+3	; 0x03
 4a0:	83 30       	cpi	r24, 0x03	; 3
 4a2:	49 f5       	brne	.+82     	; 0x4f6 <check_code+0x96>
	{
		lcd_gotoxy(1, 1);
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_gotoxy>
		lcd_puts("Welcome User2");
 4ac:	85 e3       	ldi	r24, 0x35	; 53
 4ae:	91 e0       	ldi	r25, 0x01	; 1
 4b0:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_puts>
		return 1;
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	08 95       	ret
	}
	else if((code[0]==9)&&(code[1]==8)&&(code[2]==7)&&(code[3]==6))
 4b8:	89 30       	cpi	r24, 0x09	; 9
 4ba:	f9 f4       	brne	.+62     	; 0x4fa <check_code+0x9a>
 4bc:	81 81       	ldd	r24, Z+1	; 0x01
 4be:	88 30       	cpi	r24, 0x08	; 8
 4c0:	f1 f4       	brne	.+60     	; 0x4fe <check_code+0x9e>
 4c2:	82 81       	ldd	r24, Z+2	; 0x02
 4c4:	87 30       	cpi	r24, 0x07	; 7
 4c6:	e9 f4       	brne	.+58     	; 0x502 <check_code+0xa2>
 4c8:	83 81       	ldd	r24, Z+3	; 0x03
 4ca:	86 30       	cpi	r24, 0x06	; 6
 4cc:	e1 f4       	brne	.+56     	; 0x506 <check_code+0xa6>
	{
		lcd_gotoxy(1, 1);
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_gotoxy>
		lcd_puts("Welcome User3");
 4d6:	83 e4       	ldi	r24, 0x43	; 67
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_puts>
		return 1;
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	08 95       	ret
	}
	else return 0;
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	08 95       	ret
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	08 95       	ret
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	08 95       	ret
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	08 95       	ret
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	08 95       	ret
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	08 95       	ret
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	08 95       	ret
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	08 95       	ret
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	08 95       	ret
 506:	80 e0       	ldi	r24, 0x00	; 0
	
	
}
 508:	08 95       	ret

0000050a <state_machine>:

//funkce a procedury
void state_machine(void)
{
	static uint8_t code[4]={10,10,10,10};
	switch (current_state)
 50a:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <current_state>
 50e:	82 30       	cpi	r24, 0x02	; 2
 510:	d9 f0       	breq	.+54     	; 0x548 <state_machine+0x3e>
 512:	28 f4       	brcc	.+10     	; 0x51e <state_machine+0x14>
 514:	88 23       	and	r24, r24
 516:	31 f0       	breq	.+12     	; 0x524 <state_machine+0x1a>
 518:	81 30       	cpi	r24, 0x01	; 1
 51a:	89 f0       	breq	.+34     	; 0x53e <state_machine+0x34>
 51c:	31 c0       	rjmp	.+98     	; 0x580 <state_machine+0x76>
 51e:	85 30       	cpi	r24, 0x05	; 5
 520:	88 f1       	brcs	.+98     	; 0x584 <state_machine+0x7a>
 522:	2e c0       	rjmp	.+92     	; 0x580 <state_machine+0x76>
	{
		case RESET:
			reset();
 524:	0e 94 04 01 	call	0x208	; 0x208 <reset>
			for(uint8_t i = 0; i < 4; i++)
				code[i]=10;
 528:	e0 e0       	ldi	r30, 0x00	; 0
 52a:	f1 e0       	ldi	r31, 0x01	; 1
 52c:	8a e0       	ldi	r24, 0x0A	; 10
 52e:	80 83       	st	Z, r24
 530:	81 83       	std	Z+1, r24	; 0x01
 532:	82 83       	std	Z+2, r24	; 0x02
 534:	83 83       	std	Z+3, r24	; 0x03
			current_state = GET_CODE;
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <current_state>
			break;
 53c:	08 95       	ret
		case GET_CODE:
			get_code(code);
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	91 e0       	ldi	r25, 0x01	; 1
 542:	0e 94 8c 01 	call	0x318	; 0x318 <get_code>
			break;
 546:	08 95       	ret
		case CHECK_CODE:
			current_state = check_code(code)?DOOR_OPEN:WRONG_CODE;
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	91 e0       	ldi	r25, 0x01	; 1
 54c:	0e 94 30 02 	call	0x460	; 0x460 <check_code>
 550:	81 11       	cpse	r24, r1
 552:	02 c0       	rjmp	.+4      	; 0x558 <state_machine+0x4e>
 554:	84 e0       	ldi	r24, 0x04	; 4
 556:	01 c0       	rjmp	.+2      	; 0x55a <state_machine+0x50>
 558:	83 e0       	ldi	r24, 0x03	; 3
 55a:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <current_state>
			TIM2_overflow_interrupt_disable();
 55e:	e0 e7       	ldi	r30, 0x70	; 112
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	8e 7f       	andi	r24, 0xFE	; 254
 566:	80 83       	st	Z, r24
			TIM2_overflow_4ms()
 568:	a1 eb       	ldi	r26, 0xB1	; 177
 56a:	b0 e0       	ldi	r27, 0x00	; 0
 56c:	8c 91       	ld	r24, X
 56e:	8e 7f       	andi	r24, 0xFE	; 254
 570:	8c 93       	st	X, r24
 572:	8c 91       	ld	r24, X
 574:	86 60       	ori	r24, 0x06	; 6
 576:	8c 93       	st	X, r24
			TIM2_overflow_interrupt_enable();
 578:	80 81       	ld	r24, Z
 57a:	81 60       	ori	r24, 0x01	; 1
 57c:	80 83       	st	Z, r24
			break;
 57e:	08 95       	ret
		case DOOR_OPEN:		
			break;
		case WRONG_CODE:		
			break;
		default:
			current_state = RESET;
 580:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <current_state>
 584:	08 95       	ret

00000586 <main>:
 * and UART.
 */
int main(void)
{	
	
	DDRB|=(0x08);
 586:	23 9a       	sbi	0x04, 3	; 4
	PORTB&=~(0x08);
 588:	2b 98       	cbi	0x05, 3	; 5
	//PORTB|=(0x08);
    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Enable interrupt and set the overflow prescaler to 16 ms
	//TIM0_overflow_16us();
	TIM0_overflow_16ms();
 58a:	85 b5       	in	r24, 0x25	; 37
 58c:	8d 7f       	andi	r24, 0xFD	; 253
 58e:	85 bd       	out	0x25, r24	; 37
 590:	85 b5       	in	r24, 0x25	; 37
 592:	85 60       	ori	r24, 0x05	; 5
 594:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 596:	ee e6       	ldi	r30, 0x6E	; 110
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	80 81       	ld	r24, Z
 59c:	81 60       	ori	r24, 0x01	; 1
 59e:	80 83       	st	Z, r24
	
	TIM1_overflow_262ms();
 5a0:	e1 e8       	ldi	r30, 0x81	; 129
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	80 81       	ld	r24, Z
 5a6:	8b 7f       	andi	r24, 0xFB	; 251
 5a8:	80 83       	st	Z, r24
 5aa:	80 81       	ld	r24, Z
 5ac:	83 60       	ori	r24, 0x03	; 3
 5ae:	80 83       	st	Z, r24
	//TIM1_overflow_4ms();
	TIM1_overflow_interrupt_enable();
 5b0:	ef e6       	ldi	r30, 0x6F	; 111
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	80 81       	ld	r24, Z
 5b6:	81 60       	ori	r24, 0x01	; 1
 5b8:	80 83       	st	Z, r24
	
	
	
	lcd_init(LCD_DISP_ON);
 5ba:	8c e0       	ldi	r24, 0x0C	; 12
 5bc:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_init>
	
    // Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600, F_CPU));
 5c0:	87 e6       	ldi	r24, 0x67	; 103
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 94 11 04 	call	0x822	; 0x822 <uart_init>

    // Enables interrupts by setting the global interrupt mask
    sei();
 5c8:	78 94       	sei
 5ca:	ff cf       	rjmp	.-2      	; 0x5ca <main+0x44>

000005cc <__vector_16>:
/**
 * ISR starts when Timer/Counter1 overflows. Use single conversion mode
 * and start conversion four times per second.
 */
ISR(TIMER0_OVF_vect)
{
 5cc:	1f 92       	push	r1
 5ce:	0f 92       	push	r0
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	0f 92       	push	r0
 5d4:	11 24       	eor	r1, r1
 5d6:	2f 93       	push	r18
 5d8:	3f 93       	push	r19
 5da:	4f 93       	push	r20
 5dc:	5f 93       	push	r21
 5de:	6f 93       	push	r22
 5e0:	7f 93       	push	r23
 5e2:	8f 93       	push	r24
 5e4:	9f 93       	push	r25
 5e6:	af 93       	push	r26
 5e8:	bf 93       	push	r27
 5ea:	ef 93       	push	r30
 5ec:	ff 93       	push	r31
	state_machine();
 5ee:	0e 94 85 02 	call	0x50a	; 0x50a <state_machine>
}	
 5f2:	ff 91       	pop	r31
 5f4:	ef 91       	pop	r30
 5f6:	bf 91       	pop	r27
 5f8:	af 91       	pop	r26
 5fa:	9f 91       	pop	r25
 5fc:	8f 91       	pop	r24
 5fe:	7f 91       	pop	r23
 600:	6f 91       	pop	r22
 602:	5f 91       	pop	r21
 604:	4f 91       	pop	r20
 606:	3f 91       	pop	r19
 608:	2f 91       	pop	r18
 60a:	0f 90       	pop	r0
 60c:	0f be       	out	0x3f, r0	; 63
 60e:	0f 90       	pop	r0
 610:	1f 90       	pop	r1
 612:	18 95       	reti

00000614 <__vector_13>:
/* -------------------------------------------------------------------*/
/**
 * UART 262ms
 */
ISR(TIMER1_OVF_vect)
{
 614:	1f 92       	push	r1
 616:	0f 92       	push	r0
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	0f 92       	push	r0
 61c:	11 24       	eor	r1, r1
 61e:	2f 93       	push	r18
 620:	3f 93       	push	r19
 622:	4f 93       	push	r20
 624:	5f 93       	push	r21
 626:	6f 93       	push	r22
 628:	7f 93       	push	r23
 62a:	8f 93       	push	r24
 62c:	9f 93       	push	r25
 62e:	af 93       	push	r26
 630:	bf 93       	push	r27
 632:	ef 93       	push	r30
 634:	ff 93       	push	r31
	static type_state prev_state = RESET;
	uart_puts("");
 636:	87 e9       	ldi	r24, 0x97	; 151
 638:	91 e0       	ldi	r25, 0x01	; 1
 63a:	0e 94 3f 04 	call	0x87e	; 0x87e <uart_puts>
	if(current_state != prev_state)
 63e:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <current_state>
 642:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__data_end>
 646:	98 17       	cp	r25, r24
 648:	a1 f1       	breq	.+104    	; 0x6b2 <__vector_13+0x9e>
   {
	   // Send to uart
	   uart_puts("Current state: ");
 64a:	81 e5       	ldi	r24, 0x51	; 81
 64c:	91 e0       	ldi	r25, 0x01	; 1
 64e:	0e 94 3f 04 	call	0x87e	; 0x87e <uart_puts>
	   switch(current_state)
 652:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <current_state>
 656:	82 30       	cpi	r24, 0x02	; 2
 658:	a9 f0       	breq	.+42     	; 0x684 <__vector_13+0x70>
 65a:	28 f4       	brcc	.+10     	; 0x666 <__vector_13+0x52>
 65c:	88 23       	and	r24, r24
 65e:	41 f0       	breq	.+16     	; 0x670 <__vector_13+0x5c>
 660:	81 30       	cpi	r24, 0x01	; 1
 662:	59 f0       	breq	.+22     	; 0x67a <__vector_13+0x66>
 664:	1e c0       	rjmp	.+60     	; 0x6a2 <__vector_13+0x8e>
 666:	83 30       	cpi	r24, 0x03	; 3
 668:	91 f0       	breq	.+36     	; 0x68e <__vector_13+0x7a>
 66a:	84 30       	cpi	r24, 0x04	; 4
 66c:	a9 f0       	breq	.+42     	; 0x698 <__vector_13+0x84>
 66e:	19 c0       	rjmp	.+50     	; 0x6a2 <__vector_13+0x8e>
	   {
			case RESET:
				uart_puts("RESET");
 670:	81 e6       	ldi	r24, 0x61	; 97
 672:	91 e0       	ldi	r25, 0x01	; 1
 674:	0e 94 3f 04 	call	0x87e	; 0x87e <uart_puts>
				break;
 678:	18 c0       	rjmp	.+48     	; 0x6aa <__vector_13+0x96>
			case GET_CODE:
				uart_puts("GET_CODE");
 67a:	87 e6       	ldi	r24, 0x67	; 103
 67c:	91 e0       	ldi	r25, 0x01	; 1
 67e:	0e 94 3f 04 	call	0x87e	; 0x87e <uart_puts>
				break;
 682:	13 c0       	rjmp	.+38     	; 0x6aa <__vector_13+0x96>
			case CHECK_CODE:
				uart_puts("CHECK_CODE");
 684:	80 e7       	ldi	r24, 0x70	; 112
 686:	91 e0       	ldi	r25, 0x01	; 1
 688:	0e 94 3f 04 	call	0x87e	; 0x87e <uart_puts>
				break;
 68c:	0e c0       	rjmp	.+28     	; 0x6aa <__vector_13+0x96>
			case DOOR_OPEN:
				uart_puts("DOOR_OPEN");
 68e:	8b e7       	ldi	r24, 0x7B	; 123
 690:	91 e0       	ldi	r25, 0x01	; 1
 692:	0e 94 3f 04 	call	0x87e	; 0x87e <uart_puts>
				break;
 696:	09 c0       	rjmp	.+18     	; 0x6aa <__vector_13+0x96>
			case WRONG_CODE:
				uart_puts("WRONG_CODE");
 698:	85 e8       	ldi	r24, 0x85	; 133
 69a:	91 e0       	ldi	r25, 0x01	; 1
 69c:	0e 94 3f 04 	call	0x87e	; 0x87e <uart_puts>
				break;
 6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__vector_13+0x96>
			default:
				uart_puts("ERROR");
 6a2:	80 e9       	ldi	r24, 0x90	; 144
 6a4:	91 e0       	ldi	r25, 0x01	; 1
 6a6:	0e 94 3f 04 	call	0x87e	; 0x87e <uart_puts>
	   }
	   uart_puts("\n");
 6aa:	86 e9       	ldi	r24, 0x96	; 150
 6ac:	91 e0       	ldi	r25, 0x01	; 1
 6ae:	0e 94 3f 04 	call	0x87e	; 0x87e <uart_puts>
   }
   
   prev_state = current_state;
 6b2:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <current_state>
 6b6:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <__data_end>
}
 6ba:	ff 91       	pop	r31
 6bc:	ef 91       	pop	r30
 6be:	bf 91       	pop	r27
 6c0:	af 91       	pop	r26
 6c2:	9f 91       	pop	r25
 6c4:	8f 91       	pop	r24
 6c6:	7f 91       	pop	r23
 6c8:	6f 91       	pop	r22
 6ca:	5f 91       	pop	r21
 6cc:	4f 91       	pop	r20
 6ce:	3f 91       	pop	r19
 6d0:	2f 91       	pop	r18
 6d2:	0f 90       	pop	r0
 6d4:	0f be       	out	0x3f, r0	; 63
 6d6:	0f 90       	pop	r0
 6d8:	1f 90       	pop	r1
 6da:	18 95       	reti

000006dc <__vector_9>:

// 4ms / 16ms counter
ISR(TIMER2_OVF_vect)
{
 6dc:	1f 92       	push	r1
 6de:	0f 92       	push	r0
 6e0:	0f b6       	in	r0, 0x3f	; 63
 6e2:	0f 92       	push	r0
 6e4:	11 24       	eor	r1, r1
 6e6:	2f 93       	push	r18
 6e8:	8f 93       	push	r24
 6ea:	9f 93       	push	r25
 6ec:	af 93       	push	r26
 6ee:	bf 93       	push	r27
 6f0:	ef 93       	push	r30
 6f2:	ff 93       	push	r31
	//char str[] = "  ";
	//static uint8_t wrong_tries = 0;
	if(current_state == DOOR_OPEN)
 6f4:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <current_state>
 6f8:	83 30       	cpi	r24, 0x03	; 3
 6fa:	09 f4       	brne	.+2      	; 0x6fe <__vector_9+0x22>
		PORTB|=(0x08);
 6fc:	2b 9a       	sbi	0x05, 3	; 5
	if(current_state == WRONG_CODE)
 6fe:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <current_state>
 702:	84 30       	cpi	r24, 0x04	; 4
 704:	09 f4       	brne	.+2      	; 0x708 <__vector_9+0x2c>
		itoa(wrong_tries, str, 10);
		lcd_puts(str);
		if(wrong_tries == 100)
			wrong_tries = 0;
		if(wrong_tries > 4)*/
			PORTB|=(0x04);
 706:	2a 9a       	sbi	0x05, 2	; 5
	}
	
	counter2++;
 708:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <counter2>
 70c:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <counter2+0x1>
 710:	a0 91 9b 01 	lds	r26, 0x019B	; 0x80019b <counter2+0x2>
 714:	b0 91 9c 01 	lds	r27, 0x019C	; 0x80019c <counter2+0x3>
 718:	01 96       	adiw	r24, 0x01	; 1
 71a:	a1 1d       	adc	r26, r1
 71c:	b1 1d       	adc	r27, r1
 71e:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <counter2>
 722:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <counter2+0x1>
 726:	a0 93 9b 01 	sts	0x019B, r26	; 0x80019b <counter2+0x2>
 72a:	b0 93 9c 01 	sts	0x019C, r27	; 0x80019c <counter2+0x3>
	if(counter2 == 1250)//1250*16ms=20s //1250*4ms = 5s
 72e:	82 3e       	cpi	r24, 0xE2	; 226
 730:	94 40       	sbci	r25, 0x04	; 4
 732:	a1 05       	cpc	r26, r1
 734:	b1 05       	cpc	r27, r1
 736:	89 f4       	brne	.+34     	; 0x75a <__vector_9+0x7e>
	{
		PORTB&=~(0x08);
 738:	2b 98       	cbi	0x05, 3	; 5
		PORTB&=~(0x04);
 73a:	2a 98       	cbi	0x05, 2	; 5
		/*if(current_state == DOOR_OPEN){}
			//PORTB&=~(0x04);//GPIO_toggle(&PORTB, RELAY);
		else if(current_state == WRONG_CODE && wrong_tries > 4)
			PORTB&=~(0x08);//GPIO_toggle(&PORTB, AUDIO);	*/	
		counter2 = 0;
 73c:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <counter2>
 740:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <counter2+0x1>
 744:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <counter2+0x2>
 748:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <counter2+0x3>
		current_state = RESET;
 74c:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <current_state>
		TIM2_overflow_interrupt_disable();
 750:	e0 e7       	ldi	r30, 0x70	; 112
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	80 81       	ld	r24, Z
 756:	8e 7f       	andi	r24, 0xFE	; 254
 758:	80 83       	st	Z, r24
	}
	

 75a:	ff 91       	pop	r31
 75c:	ef 91       	pop	r30
 75e:	bf 91       	pop	r27
 760:	af 91       	pop	r26
 762:	9f 91       	pop	r25
 764:	8f 91       	pop	r24
 766:	2f 91       	pop	r18
 768:	0f 90       	pop	r0
 76a:	0f be       	out	0x3f, r0	; 63
 76c:	0f 90       	pop	r0
 76e:	1f 90       	pop	r1
 770:	18 95       	reti

00000772 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 772:	1f 92       	push	r1
 774:	0f 92       	push	r0
 776:	0f b6       	in	r0, 0x3f	; 63
 778:	0f 92       	push	r0
 77a:	11 24       	eor	r1, r1
 77c:	2f 93       	push	r18
 77e:	8f 93       	push	r24
 780:	9f 93       	push	r25
 782:	ef 93       	push	r30
 784:	ff 93       	push	r31
 786:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 78a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 78e:	8c 71       	andi	r24, 0x1C	; 28
 790:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <UART_RxHead>
 794:	ef 5f       	subi	r30, 0xFF	; 255
 796:	ef 71       	andi	r30, 0x1F	; 31
 798:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <UART_RxTail>
 79c:	e9 17       	cp	r30, r25
 79e:	39 f0       	breq	.+14     	; 0x7ae <__vector_18+0x3c>
 7a0:	e0 93 a0 01 	sts	0x01A0, r30	; 0x8001a0 <UART_RxHead>
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	ed 55       	subi	r30, 0x5D	; 93
 7a8:	fe 4f       	sbci	r31, 0xFE	; 254
 7aa:	20 83       	st	Z, r18
 7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <__vector_18+0x3e>
 7ae:	82 e0       	ldi	r24, 0x02	; 2
 7b0:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <UART_LastRxError>
 7b4:	89 2b       	or	r24, r25
 7b6:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <UART_LastRxError>
 7ba:	ff 91       	pop	r31
 7bc:	ef 91       	pop	r30
 7be:	9f 91       	pop	r25
 7c0:	8f 91       	pop	r24
 7c2:	2f 91       	pop	r18
 7c4:	0f 90       	pop	r0
 7c6:	0f be       	out	0x3f, r0	; 63
 7c8:	0f 90       	pop	r0
 7ca:	1f 90       	pop	r1
 7cc:	18 95       	reti

000007ce <__vector_19>:
 7ce:	1f 92       	push	r1
 7d0:	0f 92       	push	r0
 7d2:	0f b6       	in	r0, 0x3f	; 63
 7d4:	0f 92       	push	r0
 7d6:	11 24       	eor	r1, r1
 7d8:	8f 93       	push	r24
 7da:	9f 93       	push	r25
 7dc:	ef 93       	push	r30
 7de:	ff 93       	push	r31
 7e0:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <UART_TxHead>
 7e4:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <UART_TxTail>
 7e8:	98 17       	cp	r25, r24
 7ea:	69 f0       	breq	.+26     	; 0x806 <__vector_19+0x38>
 7ec:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <UART_TxTail>
 7f0:	ef 5f       	subi	r30, 0xFF	; 255
 7f2:	ef 71       	andi	r30, 0x1F	; 31
 7f4:	e0 93 a1 01 	sts	0x01A1, r30	; 0x8001a1 <UART_TxTail>
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	ed 53       	subi	r30, 0x3D	; 61
 7fc:	fe 4f       	sbci	r31, 0xFE	; 254
 7fe:	80 81       	ld	r24, Z
 800:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 804:	05 c0       	rjmp	.+10     	; 0x810 <__vector_19+0x42>
 806:	e1 ec       	ldi	r30, 0xC1	; 193
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	80 81       	ld	r24, Z
 80c:	8f 7d       	andi	r24, 0xDF	; 223
 80e:	80 83       	st	Z, r24
 810:	ff 91       	pop	r31
 812:	ef 91       	pop	r30
 814:	9f 91       	pop	r25
 816:	8f 91       	pop	r24
 818:	0f 90       	pop	r0
 81a:	0f be       	out	0x3f, r0	; 63
 81c:	0f 90       	pop	r0
 81e:	1f 90       	pop	r1
 820:	18 95       	reti

00000822 <uart_init>:
 822:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <UART_TxHead>
 826:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <UART_TxTail>
 82a:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <UART_RxHead>
 82e:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <UART_RxTail>
 832:	99 23       	and	r25, r25
 834:	1c f4       	brge	.+6      	; 0x83c <uart_init+0x1a>
 836:	22 e0       	ldi	r18, 0x02	; 2
 838:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 83c:	90 78       	andi	r25, 0x80	; 128
 83e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 842:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 846:	88 e9       	ldi	r24, 0x98	; 152
 848:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 84c:	86 e0       	ldi	r24, 0x06	; 6
 84e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 852:	08 95       	ret

00000854 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 854:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <UART_TxHead>
 858:	2f 5f       	subi	r18, 0xFF	; 255
 85a:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 85c:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <UART_TxTail>
 860:	29 17       	cp	r18, r25
 862:	e1 f3       	breq	.-8      	; 0x85c <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 864:	e2 2f       	mov	r30, r18
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	ed 53       	subi	r30, 0x3D	; 61
 86a:	fe 4f       	sbci	r31, 0xFE	; 254
 86c:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 86e:	20 93 a2 01 	sts	0x01A2, r18	; 0x8001a2 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 872:	e1 ec       	ldi	r30, 0xC1	; 193
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	80 81       	ld	r24, Z
 878:	80 62       	ori	r24, 0x20	; 32
 87a:	80 83       	st	Z, r24
 87c:	08 95       	ret

0000087e <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 87e:	cf 93       	push	r28
 880:	df 93       	push	r29
 882:	ec 01       	movw	r28, r24
    while (*s)
 884:	88 81       	ld	r24, Y
 886:	88 23       	and	r24, r24
 888:	31 f0       	breq	.+12     	; 0x896 <uart_puts+0x18>
 88a:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 88c:	0e 94 2a 04 	call	0x854	; 0x854 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 890:	89 91       	ld	r24, Y+
 892:	81 11       	cpse	r24, r1
 894:	fb cf       	rjmp	.-10     	; 0x88c <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 896:	df 91       	pop	r29
 898:	cf 91       	pop	r28
 89a:	08 95       	ret

0000089c <_exit>:
 89c:	f8 94       	cli

0000089e <__stop_program>:
 89e:	ff cf       	rjmp	.-2      	; 0x89e <__stop_program>
